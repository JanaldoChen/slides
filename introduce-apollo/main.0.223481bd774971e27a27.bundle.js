(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{133:function(n,t,e){n.exports=e.p+"07312400ce1bb6e27bca467a8fb004b5.gif"},147:function(n,t,e){e(148),e(395),n.exports=e(389)},369:function(n,t,e){var o={"./0-title.md":370,"./01-self-introduction.md":371,"./02-contents.md":373,"./03-what-is-graphql.md":374,"./04-what-is-apollo.md":376,"./05-apollo-link-state.md":381,"./06-application.md":382,"./07-redux-vs-apollo.md":385,"./08-repos.md":387,"./09-end.md":388};function r(n){var t=a(n);return e(t)}function a(n){var t=o[n];if(!(t+1)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return t}r.keys=function(){return Object.keys(o)},r.resolve=a,n.exports=r,r.id=369},370:function(n,t){n.exports='\x3c!-- background: title --\x3e\n<h1 id="apollo-react-br-">Apollo と React を使った<br/>アプリケーション設計</h1>\n<p><br></p>\n<p><a href="https://github.com/hiroppy/slides">https://github.com/hiroppy/slides</a></p>\n'},371:function(n,t,e){n.exports='\x3c!-- background: profile --\x3e\n<h2 id="-me-">😋 ME 😙</h2>\n<p><br /></p>\n<div class="profile">\n  <div class="profile-left">\n    <img src="'+e(372)+'" alt="profile" class="profile-avatar">\n    <h4 class="profile-name">Yuta Hiroto</h4>\n    <div class="sns-list">\n      <a href="https://hiroppy.me" target="_blank">\n        <i class="fas fa-home"></i>\n      </a>\n      <a href="https://twitter.com/about_hiroppy" target="_blank">\n        <i class="fab fa-twitter"></i>\n      </a>\n      <a href="https://github.com/hiroppy" target="_blank">\n        <i class="fab fa-github"></i>\n      </a>\n      <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n        <i class="fab fa-facebook"></i>\n      </a>\n    </div>\n  </div>\n  <div class="profile-right">\n    <h5>\n      <i class="fab fa-js"></i>\n      A Web engineer and Architect\n    </h5>\n    <h4>Working at</h4>\n    <p>Dwango, Inc. as a web frontend developer</p>\n    <p>Mercari, Inc. as a web technical advisor</p>\n    <h4>A member of</h4>\n    <p>Node.js</p>\n    <p>Babel</p>\n    <p>Stylelint</p>\n    <p>Node.js Japan User Group</p>\n  </div>\n</div>\n\n\x3c!-- note\nMercari: 2018/09 -\nBizReach: 2018/06 -\nDwango: 2015/04 - 2017/05\nMercari: 2017/06 - 2017/12/15\nDwango: 2017/12/16 -\n\n\nhiroppyといいます。  \nwebエンジニアやアーキテクトをメインで行っています。  \n現在、ドワンゴという会社でN予備校というサービスのフロントエンドエンジニアをやっています。\nまた、メルカリという会社でテクニカルアドバイザーとして、webを新たなアーキテクチャに置き換えるサポートもしています。\n\nOSSでは、現在、Node.jsやBabel,Stylelintなどで活動していたりします。\nコミュニティでは、Japan Node.js AssociationでNode学園祭やNode学園を開催しています。\n--\x3e\n'},372:function(n,t,e){n.exports=e.p+"376f5905f3a7df570bb7afff4c696a62.jpg"},373:function(n,t){n.exports='<h2 id="contents">Contents</h2>\n<p><br /></p>\n\x3c!-- contents --\x3e\n'},374:function(n,t,e){n.exports='\x3c!-- sectionTitle: GraphQL --\x3e\n<h2 id="graphql">GraphQL</h2>\n<p><br /></p>\n<p><img src="'+e(375)+'" class="logo" /></p>\n<p><br /></p>\n<p><a href="https://graphql.org/">https://graphql.org/</a></p>\n<hr>\n\x3c!-- note\ngraphqlはquery, mutation, subscriptionを持ちます。\nqueryはデータの取得\nmutationはデータの変更\nsubscriptionはデータの購読\n--\x3e\n<h2 id="-server-">スキーマの例 [server]</h2>\n<pre><code class="lang-js">import { makeExecutableSchema } from &#39;graphql-tools&#39;;\n\nconst organizations = [{ name: &#39;nodejs&#39;, url: &#39;u&#39; }, { name: &#39;facebook&#39;, url: &#39;l&#39; }];\n\nconst typeDefs = `\n  type Organization {\n    name: String!\n    url: String!\n  }\n\n  type Query {\n    organizations: [Organization]\n    organization(name: String!): Organization\n  }\n`;\nconst resolvers = {\n  Query: {\n    organizations: () =&gt; organizations,\n    organization: (obj, { name }) =&gt; organizations.find((o) =&gt; o.name === name)\n  }\n};\n\nexport const schema = makeExecutableSchema({ typeDefs, resolvers });\n</code></pre>\n<hr>\n<h2 id="-client-">問い合わせの例 [client]</h2>\n<pre><code class="lang-html">&lt;script&gt;\n  (async () =&gt; {\n    const res = await fetch(&#39;/graphql&#39;, {\n      method: &#39;POST&#39;, // &quot;GET&quot;を使う場合はbodyではなくquery stringへ追加\n      headers: { &#39;Content-Type&#39;: &#39;application/json&#39; },\n      body: JSON.stringify({\n        query: `{\n          organizations {\n            name\n          }\n        }`\n      }),\n    }).then(res =&gt; res.json());\n\n    console.log(res.data.organizations);\n    // [\n    //  { name: &quot;nodejs&quot; },\n    //  { name: &quot;facebook&quot; }\n    // ]\n  })();\n&lt;/script&gt;\n</code></pre>\n'},375:function(n,t,e){n.exports=e.p+"f3704f7a42d70e5f61796584cc05bd63.png"},376:function(n,t,e){n.exports='\x3c!-- sectionTitle: Apollo --\x3e\n<h2 id="apollo">Apollo</h2>\n<p><br /></p>\n<p><img src="'+e(377)+'" class="logo" /></p>\n<p><br /></p>\n<p><a href="https://www.apollographql.com/">https://www.apollographql.com/</a></p>\n<hr>\n\x3c!-- note\nApolloはopen source componentsとcommercial extensionsとcloud servicesを提供します。\nプランはCommunityとTeamとEnterpriseの三種類があり、Data graph platformを使いたい場合は、契約が必要です。\n\n--\x3e\n<p><img src="'+e(378)+'" /></p>\n<p><a href="https://www.apollographql.com/docs/intro/platform.html" class="ref-link">The Apollo GraphQL platform</a></p>\n<hr>\n\x3c!-- note\napolloはjavascriptだけではなく、iOSやAndroidでも利用可能です。\nまた、IDEやChromeのExtensionsなどのエコシステムが充実も充実しているのも特徴です。\n\n今日は、WebのApollo Clientの話をしようと思います。\n--\x3e\n<h2 id="core-open-source-components">Core Open Source Components</h2>\n<p><br /></p>\n<ul>\n<li>Apollo Server</li>\n<li>Apollo Client<ul>\n<li>JavaScript</li>\n<li>Native Mobile(iOS, Android)</li>\n</ul>\n</li>\n<li>Apollo CLI</li>\n<li>IDE Plugins</li>\n<li>Chrome DevTools</li>\n</ul>\n<hr>\n\x3c!-- note\napollo-clientの構成はこのような図になります。\n--\x3e\n<p><img src="'+e(379)+'" /></p>\n<p><a href="https://blog.apollographql.com/the-future-of-state-management-dd410864cae2" class="ref-link">the future of state management</a></p>\n<hr>\n<p><img src="'+e(380)+'" /></p>\n\x3c!-- note\nUIライブラリですが、公式のapollographqlが提供しているパッケージは、react-apolloとapollo-angularです。\napollo-reactで無いことに注意してください。\n\n中央のapollo-clientではApollo-linksと呼ばれる仕組みを用いて、UIから来たgraphqlのリクエストを制御します。\n--\x3e\n<hr>\n<h2 id="apollo-links">Apollo Links</h2>\n<p><br /></p>\n<p><code>link</code> と呼ばれる単位を組み合わせることで<br>各 GraphQL リクエストが GraphQL クライアントによって<br>どのように処理されるかを定義することができます。</p>\n<p><br /></p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">パッケージ例</th>\n<th style="text-align:left"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">apollo-link-http</td>\n<td style="text-align:left">HTTP 使って GraphQL Query/Mutation を処理する</td>\n</tr>\n<tr>\n<td style="text-align:left">apollo-link-state</td>\n<td style="text-align:left">ローカルの状態を GraphQL のクエリを使い処理する</td>\n</tr>\n<tr>\n<td style="text-align:left">apollo-link-error</td>\n<td style="text-align:left">GraphQL やネットワークのエラー時にカスタム処理を実行する</td>\n</tr>\n<tr>\n<td style="text-align:left">apollo-link-retry</td>\n<td style="text-align:left">ネットワークやサーバーのエラーの場合、再実行する</td>\n</tr>\n<tr>\n<td style="text-align:left">apollo-link-ws</td>\n<td style="text-align:left">WebSocket を使って GraphQL subscriptions を処理する</td>\n</tr>\n</tbody>\n</table>\n<p><a href="https://www.apollographql.com/docs/link/#linkslist" class="ref-link">Available Links</a></p>\n'},377:function(n,t,e){n.exports=e.p+"e03bf46403418761e5fc4b51a3380b79.png"},378:function(n,t,e){n.exports=e.p+"a6a0b63a5be3180ee103e6cd17dbe4b1.png"},379:function(n,t,e){n.exports=e.p+"c2495db143310f28af431af5561e180e.png"},380:function(n,t,e){n.exports=e.p+"e32cfe2d1c1d8e9c6f8d16338f33e31f.png"},381:function(n,t){n.exports='\x3c!-- sectionTitle: apollo-link-state --\x3e\n<h2 id="apollo-link-state">apollo-link-state</h2>\n<p><br /></p>\n<p><a href="https://github.com/apollographql/apollo-link-state">https://github.com/apollographql/apollo-link-state</a></p>\n<hr>\n<h2 id="apollo-link-state">apollo-link-state</h2>\n<p><br /></p>\n<p>ローカルデータを Apollo Client で管理し、<br>GraphQL query/mutation を使ってアクセスします。</p>\n<p><br /></p>\n<p>🎉 apollo-link-state は Apollo Client へ v2.5 から統合されます(<a href="https://github.com/apollographql/apollo-client/pull/4338">#4338</a>) 🎉</p>\n<p><br /></p>\n<pre><code class="lang-javascript">const GET_CURRENT_SUM = gql`\n  query {\n    # @clientをつけることによりローカルに向きます\n    current @client {\n      sum\n    }\n  }\n`;\n</code></pre>\n\x3c!-- note\nstateがCoreに入ることにより、本格的に状態管理に注力していることがわかります。\n@clientというディレクティブを指定することにより、ローカルに向きます。\n--\x3e\n'},382:function(n,t,e){n.exports='\x3c!-- sectionTitle: A Minimal Example --\x3e\n\x3c!-- note\nreduxを使ったことがある人は、reduxだったらどう書くかを想像して聞いてもらえると比較しやすいかもしれません。\n--\x3e\n<h2 id="-">アプリケーションを作ってみる</h2>\n<hr>\n<p><img src="'+e(133)+'" /></p>\n<p><br /></p>\n<ul>\n<li>1: ページが読み込まれたらリポジトリの ID を取得する<ul>\n<li><code>query</code>で GitHub の Repository を 実行</li>\n</ul>\n</li>\n<li>2: ボタンを押すと以下の動作を行う<ul>\n<li>ID を使い、<code>mutation</code>で GitHub の AddStar を 実行</li>\n<li>ローカルデータのカウントを上げる</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="-">必要なこと</h2>\n<ul>\n<li>Apollo Client を作成する</li>\n<li>Initial State を作成する</li>\n<li>Resolvers を作成する</li>\n<li>コンポーネントを作成する</li>\n</ul>\n<hr>\n<h2 id="apollo-client">Apollo Client</h2>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">import { ApolloClient, InMemoryCache, ApolloLink, HttpLink } from &#39;apollo-boost&#39;;\nimport { withClientState } from &#39;apollo-link-state&#39;;\nimport { initialState } from &#39;./state&#39;;\nimport { resolvers } from &#39;./resolvers&#39;;\n\nconst cache = new InMemoryCache(); // store\nconst stateLink = withClientState({ // local\n  cache,\n  defaults: initialState,\n  resolvers\n});\nconst httpLink = new HttpLink({ // http\n  uri: &#39;https://api.github.com/graphql&#39;,\n  headers: {\n    authorization: `Bearer ${process.env.TOKEN}`\n  }\n});\nconst link = ApolloLink.from([stateLink, httpLink]);\n\nexport const client = new ApolloClient({\n  link,\n  cache\n});\n</code></pre>\n<hr>\n<h2 id="initial-state">Initial State</h2>\n<pre><code class="lang-javascript">// ローカルのステートを定義する\n\nexport const counter = {\n  current: 0,\n  __typename: &#39;Counter&#39;\n};\n\nexport const initialState = {\n  counter\n};\n</code></pre>\n<hr>\n<h2 id="repository-id-">Repository Id を取得する</h2>\n<p><img src="'+e(383)+'" /></p>\n<pre><code class="lang-javascript">export const GET_REPO = gql`\n  query {\n    repository(owner: &quot;hiroppy&quot;, name: &quot;apollo-link-state-sample-for-slide&quot;) {\n      id\n    }\n  }\n`;\n\nexport class GetRepoQuery extends Query&lt;{ repository: { id: string } }&gt; {}\n\nexport const Id: React.FC = () =&gt; (\n  &lt;GetRepoQuery query={GET_REPO}&gt;\n    {({ loading, error, data }) =&gt; {\n      if (loading) return &#39;✍️ Loading...&#39;;\n      if (error) return `Error! ${error.message}`;\n\n      return data &amp;&amp; &lt;span&gt;{data.repository.id}&lt;/span&gt;;\n    }}\n  &lt;/GetRepoQuery&gt;\n);\n</code></pre>\n<hr>\n<h2 id="-">スターを付け、カウンターを更新する</h2>\n<p><br /></p>\n<p><img src="'+e(384)+'" /></p>\n<hr>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">export const ADD_STAR = gql`\n  mutation AddStar($id: ID!) {\n    addStar(input: { starrableId: $id }) { # GitHubのAPIを叩く\n      clientMutationId\n    }\n    updateCounter @client # ローカルで定義したリゾルバへ処理に移行する\n  }\n`;\n\nexport const Button: React.FC = () =&gt; (\n  // すでに1で同じリクエストの問い合わせを行っているため、同じリクエストは行われない\n  &lt;GetRepoQuery query={GET_REPO}&gt; {/* repositoryの結果が帰ってきたらここも変更される */}\n    {({ loading, error, data }) =&gt;\n      data &amp;&amp; data.repository ? ( {/* repositoryの情報が取得されたらボタンを出す */}\n        &lt;AddStarMutation mutation={ADD_STAR} variables={{ id: data.repository.id }}&gt; {/* $id を設置 */}\n          {(addStar, { loading, error }) =&gt; {\n            if (error) return `Error! ${error.message}`;\n            return (\n              &lt;button onClick={() =&gt; addStar()} disabled={loading /* 送信中のときはdisabled */}&gt;\n                {loading ? &#39;💌&#39; : &#39;🌟&#39; /* 送信中はアイコンを変更 */}\n              &lt;/button&gt;\n            );\n          }}\n        &lt;/AddStarMutation&gt;\n      ) : null\n    }\n  &lt;/GetRepoQuery&gt;\n);\n</code></pre>\n<hr>\n<h2 id="-">ローカルのカウンターを更新するリゾルバ</h2>\n<pre><code class="lang-javascript">export const GET_COUNTER = gql`\n  query {\n    counter @client {\n      current\n    }\n  }\n`;\n\nexport const resolvers: IResolvers = {\n  Mutation: {\n    // AddStar で実行されたupdateCounterの処理\n    updateCounter: (_, variables, { cache }) =&gt; {\n      const query = GET_COUNTER;\n      const prev = cache.readQuery({ query }); // currentデータを取得\n      const data = { current: prev.counter.current++ };\n\n      cache.writeData({ query, data }); // 更新\n\n      return null;\n    }\n  }\n};\n</code></pre>\n<hr>\n<h2 id="-">カウンター</h2>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">export const GET_COUNTER = gql`\n  query {\n    counter @client { # ローカルフラグ\n      current\n    }\n  }\n`;\n\nexport const Counter: React.FC = () =&gt; (\n  /* ADD_STAR で実行された updateCounter内でstoreが更新され、反映される */\n  &lt;GetCounterQuery query={GET_COUNTER}&gt;\n    {({ loading, error, data }) =&gt; {\n      if (loading) return &#39;Loading...&#39;;\n      if (error) return `Error! ${error.message}`;\n\n      return data &amp;&amp; &lt;span&gt;{data.counter.current}&lt;/span&gt;;\n    }}\n  &lt;/GetCounterQuery&gt;\n);\n</code></pre>\n<hr>\n<p><img src="'+e(133)+'" /></p>\n<pre><code class="lang-javascript">import { Id } from &#39;./Id&#39;;\nimport { Button } from &#39;./Button&#39;;\nimport { Counter } from &#39;./Counter&#39;;\n\nexport const Top: React.FC = () =&gt; (\n  &lt;&gt;\n    &lt;Id /&gt;\n    &lt;Counter /&gt;\n    &lt;Button /&gt;\n  &lt;/&gt;\n);\n</code></pre>\n'},383:function(n,t,e){n.exports=e.p+"24598ba5cd7d800737b624e0afb6b3fa.gif"},384:function(n,t,e){n.exports=e.p+"2c5b3552ecea54564fbe2eefaf62c9eb.gif"},385:function(n,t,e){n.exports='\x3c!-- sectionTitle: redux vs apollo-client --\x3e\n<h2 id="redux-vs-apollo-client">redux vs apollo-client</h2>\n\x3c!-- note\nここの表現って難しくて、apollo-client側にremote dataを管理させ、redux側にlocal dataを管理する実装もあります。\n--\x3e\n<hr>\n<h2 id="-fetch-">👍 fetch のフラグ管理が楽</h2>\n<p><br /></p>\n<p>client と view が密になっているため、ローディング中やエラーがわかりやすい</p>\n<p><br /></p>\n<pre><code class="lang-javascript">export const Button: React.FC = () =&gt; (\n  &lt;AddStarMutation mutation={ADD_STAR} variables={{ id: data.repository.id }}&gt;\n    {(addStar, { loading, error }) =&gt; {\n      if (error) return `Error! ${error.message}`;\n      return (\n        &lt;button onClick={() =&gt; addStar()} disabled={loading /* 送信中のときはdisabled */}&gt;\n          {loading ? &#39;💌&#39; : &#39;🌟&#39; /* 送信中はアイコンを変更 */}\n        &lt;/button&gt;\n      );\n    }}\n  &lt;/AddStarMutation&gt;\n);\n</code></pre>\n<hr>\n<h2 id="-">👍 部分更新が簡単</h2>\n<p><br /></p>\n<p>Container Component と同じ振る舞いをするのが簡単</p>\n<p><br /></p>\n<p><img src="'+e(386)+'" /></p>\n<hr>\n<h2 id="-">👍 何が必要かわかりやすい</h2>\n<p>リモートとローカルを同一クエリで表現できる</p>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">const GET_AUTHOR = gql`\n  query {\n    author {\n      name\n      avatar_url\n    }\n    status @client {\n      isHappy\n    }\n  }\n`;\n\nconst Top: React.FC = () =&gt; (\n  &lt;Query query={GET_AUTHOR}&gt;\n    ({(loading, error, data)}) =&gt; (\n    &lt;&gt;\n      &lt;p&gt;{data.author.name} {data.status.isHappy}&lt;/p&gt;\n      &lt;img src={data.author.avatar_url} /&gt;\n    &lt;/&gt;\n    )\n  &lt;/Query&gt;\n);\n</code></pre>\n<hr>\n<h2 id="-">👎 複雑な処理を書くのはあまり向いてない</h2>\n<p><br /></p>\n<p>redux-saga などで複雑な処理を書く必要があるアプリケーションは苦手</p>\n<hr>\n\x3c!-- note\nもしこの話を聞いて、Apolloに興味をもってくれたら嬉しいです。\n--\x3e\n<h2 id="-">まとめ</h2>\n<p><br /></p>\n<ul>\n<li>Apollo はエコシステムも含め充実している</li>\n<li>Redux で書いていたことを減らせる可能性が高い</li>\n<li>apollo-link-state は今後コアに入る</li>\n</ul>\n'},386:function(n,t,e){n.exports=e.p+"bcb3764125d6bf96d16081e52b1b4d31.gif"},387:function(n,t){n.exports='\x3c!-- sectionTitle: Repositories --\x3e\n<h2 id="repositories">Repositories</h2>\n<p><br /></p>\n<ul>\n<li>GraphQL<ul>\n<li><a href="https://github.com/hiroppy/the-minimal-example-of-graphql">the-minimal-example-of-graphql</a></li>\n</ul>\n</li>\n<li>apollo-link-state<ul>\n<li><a href="https://github.com/hiroppy/apollo-link-state-sample">apollo-link-state-sample</a></li>\n</ul>\n</li>\n<li>スライドで使ったサンプル<ul>\n<li><a href="https://github.com/hiroppy/apollo-link-state-sample-for-slide">apollo-link-state-sample-for-slide</a></li>\n</ul>\n</li>\n<li>Apollo を使った SSR<ul>\n<li><a href="https://github.com/hiroppy/ssr-sample">ssr-sample</a></li>\n</ul>\n</li>\n</ul>\n'},388:function(n,t){n.exports='\x3c!-- background: end --\x3e\n<h1 id="the-end">The End</h1>\n<p><br /></p>\n<div class="sns-list sns-list-end">\n  <a href="https://hiroppy.me" target="_blank">\n    <i class="fas fa-home"></i>\n  </a>\n  <a href="https://twitter.com/about_hiroppy" target="_blank">\n    <i class="fab fa-twitter"></i>\n  </a>\n  <a href="https://github.com/hiroppy" target="_blank">\n    <i class="fab fa-github"></i>\n  </a>\n  <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n    <i class="fab fa-facebook"></i>\n  </a>\n</div>\n'},390:function(n,t,e){var o=e(391);"string"==typeof o&&(o=[[n.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};e(51)(o,r);o.locals&&(n.exports=o.locals)},391:function(n,t,e){}},[[147,5,3]],[4]]);