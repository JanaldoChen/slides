(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{154:function(e,n,t){},155:function(e,n,t){var o=t(154);"string"==typeof o&&(o=[[e.i,o,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};t(54)(o,s);o.locals&&(e.exports=o.locals)},157:function(e,n){e.exports='\x3c!-- background: end --\x3e\n\x3c!-- note\nThank you for your kind attention.\n--\x3e\n<h1 id="the-end">The End</h1>\n<p><br /></p>\n<div class="sns-list sns-list-end">\n  <a href="https://hiroppy.me" target="_blank">\n    <i class="fas fa-home"></i>\n  </a>\n  <a href="https://twitter.com/about_hiroppy" target="_blank">\n    <i class="fab fa-twitter"></i>\n  </a>\n  <a href="https://github.com/hiroppy" target="_blank">\n    <i class="fab fa-github"></i>\n  </a>\n  <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n    <i class="fab fa-facebook"></i>\n  </a>\n  <a href="https://www.linkedin.com/in/hiroppy" target="_blank">\n    <i class="fab fa-linkedin"></i>\n  </a>\n</div>\n'},158:function(e,n){e.exports='\x3c!-- sectionTitle: Summary --\x3e\n\x3c!-- note\nThis is today\'s summary.\n\n* a file becomes ESM / when package.json has `type: module`\n* a file\'s module / depends on the closest parent\'s package.json\n* at the top level, CJS cannot call ESM\n* some variables used in CJS / cannot be used in ESM\n* the goal is to drop a flag / by when Node 12 starts LTS / in October 2019\n\nPlease look forward to future Node.js!\n--\x3e\n<h2 id="summary">Summary</h2>\n<p><br /></p>\n<ul>\n<li>a file becomes ESM when package.json has <code>type: module</code></li>\n<li>a file&#39;s module depends on the closest parent&#39;s package.json</li>\n<li>at the top level, CJS cannot call ESM</li>\n<li>some variables used in CJS cannot be used in ESM</li>\n<li>the goal is to drop a flag by when Node 12 starts LTS in October 2019</li>\n</ul>\n<hr>\n\x3c!-- sectionTitle: References --\x3e\n\x3c!-- note\nThese are the references / used to make this slide.\n--\x3e\n<h2 id="references">References</h2>\n<p><br /></p>\n<ul>\n<li><a href="https://github.com/nodejs/modules">nodejs/modules</a></li>\n<li><a href="https://developers.google.com/web/fundamentals/primers/modules">Using JavaScript modules on the web</a></li>\n<li><a href="https://blog.hiroppy.me/entry/nodejs-experimental-modules">Node.js „ÅÆÊñ∞„Åó„ÅÑ„É¢„Ç∏„É•„Éº„É´ÊñπÂºè„ÅÆÂÆüÈ®ìÁöÑÂ∞éÂÖ•</a></li>\n<li><a href="https://blog.jxck.io/entries/2017-06-21/nomodule-attribute.html">ES Modules „Å∏„ÅÆÊ©ãÊ∏°„Åó„Å®„Åó„Å¶„ÅÆ nomodule Â±ûÊÄß</a></li>\n</ul>\n'},159:function(e,n,t){e.exports=t.p+"971c7c25a1f51e5dea7bf2585411c583.png"},160:function(e,n,t){e.exports=t.p+"ba2fd898cb64eba397b3f97ce2fd10df.png"},161:function(e,n,t){e.exports='\x3c!-- sectionTitle: ESM in Node.js --\x3e\n\x3c!-- note\nLet\'s look at Node.js ESM.\nCurrently, the status of ESM is stability:1.\nNode.js has stability level. It has 3 phases, 0 is Deprecated, 1 is Experimental, and 2 is Stable.\nSince stability 1 is experimental, it will be changed sometimes. Therefore, you should not use it in production.\n--\x3e\n<h2 id="esm-in-node-js">ESM in Node.js</h2>\n<p><br /></p>\n<p>Stability: 1<br>üë∑‚Äç the specifications may change in the future</p>\n<p><br /></p>\n<p>The goal is to ‚Äúrelease‚Äù (drop a flag) by when Node 12 starts LTS in October 2019.</p>\n<p><br /></p>\n<p><a href="https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md#plan-for-new-modules-implementation">Plan for New Modules Implementation</a></p>\n<hr>\n\x3c!-- note\nPR was submitted on 18th March / to Node.js Core by Myles.\nWe discuss the specification at nodejs/modules. Then, implement at nodejs/ecmascript-modules / which forked Node.js Core, and finally / backport to Node.js Core.\n--\x3e\n<p><img src="'+t(160)+'" class="esm-pr" /></p>\n<p><a href="https://github.com/nodejs/node/pull/26745" class="ref-link">https://github.com/nodejs/node/pull/26745</a></p>\n<hr>\n\x3c!-- note\nNode.js spent a long time implementing ESM.\nNode.js had two major problems / that browsers don\'t have.\n\nOne is that Node.js cannot recognize / if a file is written in ESM.\nIn the case of browsers, it can be recognized / because it is written as `module` / in the `type` attribute.\nHowever, Node.js\' import doesn\'t have an attribute / like the `type`.\nSo we decided to look at the file extensions / to be imported.\nWe made a rule / that a file with the `.mjs` extension is written in ESM.\n\nAnd another issue is compatibility with existing CJS Modules.\nNode.js values backward compatibility. However, Node.js already has a module system.\nIt\'s very difficult / to implement ESM / so as not to break the existing code.\n\n--\x3e\n<h2 id="node-js-specific-issues">Node.js specific issues</h2>\n<p><br /></p>\n<p>Node.js spent a long long time to implement ESM...</p>\n<p><br /></p>\n<ul>\n<li>whether the file to be called is written in ESM or not</li>\n<li>compatible with CJS</li>\n</ul>\n<hr>\n\x3c!-- note\nNode.js defined the standard / for implementation.\n\n* Spec compliance\n  * we always follow the ECMAScript spec\n* Browser equivalence\n  * a code that executes in both environments / should produce identical results\n* Don‚Äôt break CommonJS\n  * we cannot cause breaking changes / with regards to CommonJS\n\nWe keep these standards / and implement ESM in Node.js.\n---\x3e\n<h2 id="standards">Standards</h2>\n<p><br /></p>\n<ul>\n<li>Spec compliance<ul>\n<li>always follow the ES spec</li>\n</ul>\n</li>\n<li>Browser equivalence<ul>\n<li>a code that executes in both environments should produce identical results</li>\n</ul>\n</li>\n<li>Don‚Äôt break CommonJS<ul>\n<li>cannot cause breaking changes with regards to CommonJS</li>\n</ul>\n</li>\n</ul>\n<p><br /></p>\n<p><a href="https://github.com/nodejs/modules">Node.js Foundation Modules Team</a></p>\n<hr>\n\x3c!-- sectionTitle: Rules --\x3e\n\x3c!-- note\nI would like to introduce some of ESM rules.\n--\x3e\n<h2 id="rules">Rules</h2>\n<hr>\n\x3c!-- note\nESM\'s path conforms to whatwg url.\nSee the example.\nAs you can see, import syntax accepts URL object.\nAccess using a relative path, an absolute path, a package name, and `file` protocol can be performed.  \nCurrently, protocols support only `file`.\n--\x3e\n<h2 id="esm-s-path-conforms-to-whatwg-url">ESM&#39;s path conforms to whatwg url</h2>\n<pre><code class="lang-javascript">import &#39;./foo.js&#39;;\nimport &#39;file:///xxxx/foo.js&#39;;\n\n// dynamic import\n(async () =&gt; {\n  const baseURL = new URL(&#39;file://&#39;);\n  baseURL.pathname = `${process.cwd()}/foo.js`;\n\n  const foo = await import(baseURL);\n\n  console.log(foo); // [Module] { default: &#39;hello&#39; }\n})();\n</code></pre>\n<hr>\n\x3c!-- note\nYou can not use Node.js specific variables / that were available until now.\nSuch as, `require`, `module`, `exports`, `__dirname`, and `__filename`.\nThese variables will become `undefined` / when you write in ESM.\n\nTo use these variables in ESM, you can use `import.meta` or `createRequireFromPath` to reproduce the same behavior.\nIf you want to get a file path, you can use `import.meta.url`.\nThis is an ESM specification / and currently exists in stage-3 of TC39.\nIf you want to use `require` syntax in ESM, you can use `createRequireFromPath` method. By passing a based path as an argument, This function returns an executable `require` method / based on passed the argument.\n--\x3e\n<h2 id="invalid-variables">Invalid variables</h2>\n<pre><code class="lang-javascript">// The following variables don&#39;t exist in ESM.\nconsole.log(typeof require);\nconsole.log(typeof module);\nconsole.log(typeof exports);\nconsole.log(typeof __dirname);\nconsole.log(typeof __filename);\n\n// Substitutes ------------------------------------\n// Get a path info like __dirname and __filename.\nconsole.log(import.meta);\n// [Object: null prototype] {\n//   url: &#39;file:///Users/xxxx/index.js&#39;\n// }\n\n// Create `require` function.\nimport { createRequireFromPath } from &#39;module&#39;;\nimport { fileURLToPath } from &#39;url&#39;;\n\n// ./\nconst require = createRequireFromPath(fileURLToPath(import.meta.url));\n\n// ./cjs/index.js\nrequire(&#39;./cjs/index.js&#39;);\n</code></pre>\n<hr>\n\x3c!-- note\nCJS can omit `.js`, `.node`, `.json` extensions / and the filename "index".\nHowever, ESM doesn\'t have this specification, so we also make this CJS specification / unavailable in ESM by default.\nSo, we prepared `--es-module-specifier-resolution` flag.\nThis flag has `explicit` and `node` options, and the default is `explicit`.\nI think / most of the existing code written in ESM / has omitted the extension and `index`. Then, please use `node` option.\n--\x3e\n<h2 id="explicit-filenames">Explicit filenames</h2>\n<p><code>explicit</code> and <code>node</code> exist, the default is <code>explicit</code><br>since explicit file extensions are usually required on the Web.</p>\n<p><br /></p>\n<ul>\n<li>file extensions are mandatory in import statements</li>\n<li>cannot omit index.js</li>\n</ul>\n<p><br /></p>\n<pre><code class="lang-javascript">// strict/index.js\n\nimport &#39;./foo/index.js&#39;; // --es-module-specifier-resolution=explicit\nimport &#39;./foo&#39;; // --es-module-specifier-resolution=node\n</code></pre>\n<pre><code class="lang-sh">$ node --experimental-modules --es-module-specifier-resolution=node ./strict/index.js\n$ node --experimental-modules  ./strict/index.js # default is `explicit`\n</code></pre>\n<hr>\n\x3c!-- note\nIn the future, you will not be able to execute anything / other than JavaScript.\n\nCJS supported JSON(`.json`) and native modules(`.node`), but ESM does not.  \nYou might use `module.createRequireFromPath()` for these.\n\nHowever, Node.js has `--experimental-json-modules` flag to load JSON  \n/ because there is work in progress / for standardizing this feature / with browsers.\n--\x3e\n<h2 id="javascript-only">JavaScript only</h2>\n<p><br /></p>\n<p>CJS supported JSON(<code>.json</code>) and native modules(<code>.node</code>), but ESM does not.<br>You might use <code>module.createRequireFromPath()</code> for these.</p>\n<p><br /></p>\n<p>However, Node.js has <code>--experimental-json-modules</code> flag to load JSON<br>because there is work in progress for standardizing this feature with browsers.</p>\n<p><br /></p>\n<p><a href="https://github.com/whatwg/html/issues/4315">whatwg/html &quot;JSON modules&quot;</a></p>\n<hr>\n\x3c!-- note\nThis example is written in CJS.\n\nIt is impossible / to call an ESM file / using require syntax.\nOn the other hand, if you use import syntax, you can call CJS files.\nHowever, only dynamic import can call ESM files / from CJS.\n\nIn conclusion, CJS cannot call ESM / at the top level, but CJS can use dynamic import. Also, ESM can call CJS.\n--\x3e\n<h2 id="cannot-load-esm-from-cjs">Cannot load ESM from CJS</h2>\n<pre><code class="lang-javascript">// // Reading ESM at top-level is prohibited.\n// import foo from &#39;./esm/foo.js&#39;; // invalid\n\n// // An error occurs because the read file is written as ESM.\n// // `require` expects read file as CJS\n// require(&#39;./esm/foo&#39;);\n//\n// // export default typeof module !== &#39;undefined&#39; ? &#39;cjs&#39; : &#39;esm&#39;;\n// // ^^^^^^\n// // SyntaxError: Unexpected token export\n\nconsole.log(&#39;root.js:&#39;, typeof module !== &#39;undefined&#39; ? &#39;cjs&#39; : &#39;esm&#39;); // cjs\n\n(async () =&gt; {\n  const { default: foo } = await import(&#39;./esm/foo.js&#39;);\n  console.log(&#39;foo.js :&#39;, foo); // esm\n})();\n\n// Conclusion\n// üôÜ‚Äç‚ôÄÔ∏è ESM -&gt; CJS\n// üôÖ‚Äç‚ôÄÔ∏è CJS -&gt; ESM (excluding dynamic import)\n</code></pre>\n<hr>\n\x3c!-- sectionTitle: How to resolver ESM and CJS --\x3e\n\x3c!-- note\nLet\'s explain how Node.js distinguishes ESM and CJS.\n--\x3e\n<h2 id="how-to-resolve-esm-and-cjs">How to resolve ESM and CJS</h2>\n<hr>\n\x3c!-- note\nI think many people have heard the word `.mjs` / in the past.\nCertainly, it is easy to distinguish by the extension.\nHowever, in the future, ESM will become the de-facto standard,\nso we don\'t want to change the extension / from `.js` to `.mjs` / it\'s not needed.\nProbably, this is something that / many people wanted. So we looked for another solution.\n--\x3e\n<h2 id="-mjs-">.mjs ?</h2>\n<p><br /></p>\n<p>ü§î</p>\n<p><br /></p>\n<p>It is easy to distinguish a file which has the <code>.mjs</code> extension is as ESM.<br>But, maybe many people don&#39;t want to use the <code>.mjs</code> extension.üòû</p>\n<hr>\n\x3c!-- note\nThere is a way / to specify the module type / to package.json.\n\nThis solution is already in the Core of Node.js, and probably will not be changed.  \nThe solution is very simple.\nEach file\'s module type / depends on the closest parent\'s package.json.\n\nSee this picture.\npackage.json on the root.js has `type: module`, so root.js will be read as ESM.\n\nindex.js in esm directory doesn\'t have package.json / in the same hierarchy / so index.js depends on package.json in the root hierarchy.\nTherefore, this file is also read as ESM.\n\nFinally, let\'s look at the index.js in cjs. package.json exists in the same hierarchy / but doesn\'t have `type` attribute. So, index.js is read as CJS.\n--\x3e\n<h2 id="package-json-type-field">Package.json &quot;type&quot; field</h2>\n<p><br /></p>\n<p><img src="'+t(159)+'" /></p>\n<p><br />\nRefers to the closest parent&#39;s package.json.</p>\n<p><br /></p>\n<p>üë∑‚Äç <code>type</code> name might change. <a href="https://github.com/nodejs/modules/issues/312">issue</a></p>\n<hr>\n\x3c!-- note\nYou can specify the type attribute / in package.json.\nThis attribute has `commonjs` and `module`, and the default is `commonjs`.\n--\x3e\n<h2 id="package-json">package.json</h2>\n<p><br /></p>\n<pre><code class="lang-json">{\n  &quot;type&quot;: &quot;module&quot; // or `commonjs`, the default is `commonjs`\n}\n</code></pre>\n<p><br /></p>\n<p>Basically, all node_modules don&#39;t have <code>type</code> field,<br>so they are read as CJS. Thus this change isn&#39;t breaking changes.</p>\n<hr>\n\x3c!-- note\nLet\'s check the code. The directory structure is the same as the previous slide.\n\nSince / ESM doesn\'t have a `module` variable, it is ESM if `module` is undefined.\n\nLook at the output results.\n\nAt first, `./esm/index.js` is called / and output as ESM. This file depends on package.json / of the root directory.  \nNext, `./esm/cjs/index.js` is called / and output as CJS. This file depends on package.json / which exists in the same hierarchy / and this package.json doesn\'t have `type` attribute.\nFinally, `./root.js` outputs as ESM / because package.json in the same hierarchy has `type:module`.\nIf package.json in the root directory / doesn\'t have `type:module`, this file can not be executed. Because it is executed as CJS, it can not interpret import syntax.\n--\x3e\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">/**\n‚îú‚îÄ‚îÄ esm\n‚îÇ   ‚îú‚îÄ‚îÄ cjs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json (commonjs is used because type is not specified)\n‚îÇ   ‚îî‚îÄ‚îÄ index.js\n‚îú‚îÄ‚îÄ package.json (type: module)\n‚îî‚îÄ‚îÄ root.js\n */\n// ./root.js ----------------------------------------------------------------- 1\nimport &#39;./esm/index.js&#39;;\nimport &#39;./esm/cjs/index.js&#39;;\nconsole.log(&#39;root.js          :&#39;, typeof module !== &#39;undefined&#39; ? &#39;cjs&#39; : &#39;esm&#39;); \n\n// ./esm/index.js ------------------------------------------------------------ 2\n// Refers to the closest parent&#39;s package.json.\nconsole.log(&#39;esm/index.js    :&#39;, typeof module !== &#39;undefined&#39; ? &#39;cjs&#39; : &#39;esm&#39;);\n\n// ./esm/cjs/index.js -------------------------------------------------------- 3\nconsole.log(&#39;esm/cjs/index.js:&#39;, typeof module !== &#39;undefined&#39; ? &#39;cjs&#39; : &#39;esm&#39;);\n</code></pre>\n<pre><code class="lang-shell">$ node --experimental-modules root.js\nesm/index.js    : esm # 2\nesm/cjs/index.js: cjs # 3\nroot.js         : esm # 1\n</code></pre>\n<hr>\n\x3c!-- note\nIf you do not want to follow this rule / for specific files, you specify the extension.\nYou can use `.mjs` and `.cjs` extensions.\nIf you want to read as ESM, use the mjs extension. If you want to read as CJS, use the cjs extension.\n--\x3e\n<h2 id="-mjs-and-cjs"><code>.mjs</code> and <code>.cjs</code></h2>\n<p>All files follow the package.json type rules,<br>but there are cases where want to exclude certain files.</p>\n<p>By changing the file extension from <code>.js</code>,<br>it is possible to exclude the application of the rule.</p>\n<p><br /></p>\n<pre><code class="lang-javascript">// always read as CJS\nimport &#39;./file.cjs&#39;;\n\n// always read as ESM\nimport &#39;./file.mjs&#39;;\n</code></pre>\n<hr>\n\x3c!-- sectionTitle: Working in progress --\x3e\n\x3c!-- note\nCurrently, this is an ongoing task.\n\n* dual CommonJS/ES module packages\n* easier `require`\n* package path maps\n* automatic entry point module type detection\n\nThese tasks will be improved / before the `--experimental-modules` flag is removed.\n--\x3e\n<h2 id="working-in-progress">Working in progress</h2>\n<p><br /></p>\n<ul>\n<li>dual CommonJS/ES module packages<ul>\n<li><a href="https://github.com/nodejs/modules/issues/273">Proposal for dual ESM/CommonJS packages</a></li>\n</ul>\n</li>\n<li>easier <code>require</code></li>\n<li>package path maps</li>\n<li>automatic entry point module type detection</li>\n</ul>\n<p><br /></p>\n<p><a href="https://github.com/nodejs/modules/blob/master/doc/announcement.md#works-in-progress">Works in progress</a></p>\n'},162:function(e,n,t){e.exports=t.p+"44f6302740bad582265c95be70780f56.png"},163:function(e,n,t){e.exports='\x3c!-- sectionTitle: Modules --\x3e\n\x3c!-- note\nJavaScript has many module systems. For example, AMD, UMD, and CJS.\nThis specification is owned by WHATWG and TC39.\nTC39 has ESM syntax / and rules concerning javascript.\n\nFor example, the default is strict mode / and how to treat "this", etc...\nHowever, modules loading is owned by WHATWG / because / it is the difference between browsers and Node.js.\n\nOn the other hand, dynamic import is javascript only syntax, so TC39 manages it. Now, dynamic import is stage-3 of TC39\n--\x3e\n<h2 id="ecmascript-modules">ECMAScript Modules</h2>\n<p><br /></p>\n<p><a href="https://whatwg.github.io/loader/">whatwg/loader</a><br><a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-scripts-and-modules">ECMAScript Language: Scripts and Modules</a></p>\n<hr>\n\x3c!-- note\nYou can specify "module" to "type" attribute in "script" / to make it recognized as ESM. However, browsers that don\'t know `type: module` / ignore this script tag.\nIn other words, it is not executed.\n\nSo you use the `nomodule` attribute. Browsers that don\'t support ESM / can ignore this attribute / and execute it / as a normal script tag / because / `type` attribute has not changed.\nAnd browsers that support ESM / don\'t execute this script. I think / files into one using a bundler / usually have this attribute.\n--\x3e\n<h2 id="html">HTML</h2>\n<pre><code class="lang-html">&lt;!-- browsers that support ESM --&gt;\n&lt;script type=&quot;module&quot; src=&quot;esm.js&quot;&gt;&lt;/script&gt;\n&lt;script nomodule src=&quot;fallback.js&quot;&gt;&lt;/script&gt;\n\n&lt;!-- interpreting browsers that don&#39;t support ESM are to the below --&gt;\n&lt;!-- &lt;script type=&quot;module&quot; src=&quot;esm.js&quot;&gt;&lt;/script&gt; --&gt; &lt;!-- ignore this line --&gt;\n&lt;script src=&quot;fallback.js&quot;&gt;&lt;/script&gt; &lt;!-- ignore `nomodule` attribute --&gt;\n</code></pre>\n<p><a href="https://developers.google.com/web/fundamentals/primers/modules" class="ref-link">Using JavaScript modules on the web</a></p>\n<hr>\n\x3c!-- note\nAll browsers can use modules / other than Internet Explorer.\nWe might not need bundlers / like webpack / in the future.\nHowever, it is still more efficient / to bundle large code now.\n--\x3e\n<h2 id="browser-compatibility">Browser Compatibility</h2>\n<p><img src="'+t(162)+'" class="browser-compatibility" /></p>\n<p><a class="ref-link" href="https://caniuse.com/#search=modules">can I use modules</a></p>\n<hr>\n\x3c!-- note\nI think / many people are already using ESM.\nESM has `import` and `export` syntax. Like this example.\n\nI describe the features of ESM.\n\n`import` and `export` / can only be written at the top level.\nthis makes it possible / to detect errors before execution.\nIf you want to get modules as asynchronously, please use dynamic import / which is stage-3 of tc39.\nAnd, since `import` statement is hoisting, it is declared / at the beginning of the module / wherever it is written. So / this is the same behavior / as a function declaration.\nAlso, the top level `this` in the module / becomes undefined / and a module which is written in ESM / becomes strict mode.\n--\x3e\n<h2 id="ecmascript-modules">ECMAScript Modules</h2>\n<pre><code class="lang-javascript">import defaultExport from &#39;module-name&#39;;\nimport * as name from &#39;module-name1&#39;;\nimport { name } from &#39;module-name2&#39;;\nimport { export as alias } from &#39;module-name&#39;;\nimport &#39;module-name&#39;;\n\nexport { name as name2 };\nexport let name1 = &#39;1&#39;, name2 = &#39;2&#39;;\nexport function FunctionName() {}\nexport class ClassName {}\n\n(async () =&gt; {\n  const { default: foo } = await import(&#39;module-name3&#39;);\n})();\n\n// ref:\n//   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\n//   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\n</code></pre>\n'},164:function(e,n){e.exports="\x3c!-- note\nThen, let's move on. This is the agenda.\n\nI'm going to talk about ECMAScript Modules.\n\nFirst I'm going to introduce what ECMAScript Modules are.\nNext,  I'm going to talk about ECMAScript Modules in Node.js.\nFinally, I'm going to give a summary of what I said in this slide.\n\nFrom here on, I will refer to ECMAScript Modules as ESM / and CommonJS Modules as CJS.\n--\x3e\n<h2 id=\"contents\">Contents</h2>\n<p><br /></p>\n\x3c!-- contents --\x3e\n"},165:function(e,n,t){e.exports=t.p+"4d84ca4ff39858b6abd213c84f148aa4.png"},166:function(e,n,t){e.exports='\x3c!-- note\nPlease let me introduce my company.\n\nMercari is a C2C marketplace app / that allows users / to enjoy buying and selling.\nOffices in Japan / and the United States have / more than 1650 people work.\n\nMercari‚Äôs mission is / to ‚Äúcreate value in a global marketplace / where anyone can buy & sell,‚Äù / and its focus on a global marketplace / can be seen in the decision  / to expand overseas the year / after its foundation.\nThe company believes that / succeeding in a market as large / and diverse as the US / is a key milestone in achieving its mission.\n--\x3e\n<p><img src="'+t(165)+'" /></p>\n'},167:function(e,n,t){e.exports=t.p+"376f5905f3a7df570bb7afff4c696a62.jpg"},168:function(e,n,t){e.exports='\x3c!-- background: japan --\x3e\n\x3c!-- note\nFirst of all, let me introduce myself.\n\nI\'m Yuta. Everyone calls me "hiroppy".\nI came to Dublin from Japan / to study English, so I\'m a student now!\nI\'m living in Dublin until September / and then / I\'m going to go back to Japan.\n\nCurrently, I\'m a technical advisor at Mercari / and / working on improving webpack as an OSS developer.\nAlso, I\'m a Node.js Core Collaborator.\n\nThis picture above is a famous shrine in Japan / was taken from the article / called "Why 2019 is the best year to visit Japan".\n\nIf you come to Japan / at this time of year, you will see the cherry blossoms / like in this picture.\n--\x3e\n<h2 id="-me-">üòã ME üòô</h2>\n<p><br /></p>\n<div class="profile">\n  <div class="profile-left">\n    <img src="'+t(167)+'" alt="profile" class="profile-avatar">\n    <h4 class="profile-name">Yuta Hiroto</h4>\n    üáØüáµ üõ´ üáÆüá™\n    <br />\n    <div class="sns-list">\n      <a href="https://hiroppy.me" target="_blank">\n        <i class="fas fa-home"></i>\n      </a>\n      <a href="https://twitter.com/about_hiroppy" target="_blank">\n        <i class="fab fa-twitter"></i>\n      </a>\n      <a href="https://github.com/hiroppy" target="_blank">\n        <i class="fab fa-github"></i>\n      </a>\n      <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n        <i class="fab fa-facebook"></i>\n      </a>\n      <a href="https://www.linkedin.com/in/hiroppy" target="_blank">\n        <i class="fab fa-linkedin"></i>\n      </a>\n    </div>\n    <br>\n    <a href="https://www.patreon.com/hiroppy">please support me!</a>\n  </div>\n  <div class="profile-right">\n    <h5>\n      <i class="fab fa-js"></i>\n      A Web engineer and Architect\n    </h5>\n    <h4>Working at</h4>\n    <p>Mercari, Inc. as a web technical advisor</p>\n    <h4>A member of</h4>\n    <p>Node.js</p>\n    <p>webpack</p>\n    <p>Gatsby</p>\n    <p>Node.js Japan User Group</p>\n  </div>\n</div>\n\n<p><a href="https://www.womanandhome.com/travel/best-time-to-visit-japan-55928/" class="ref-link">Why 2019 is the best year to visit Japan</a></p>\n'},169:function(e,n){e.exports='\x3c!-- background: title --\x3e\n\x3c!-- note\n„Åì„Çì„Å´„Å°„ÅØÔºÅ\n"„Åì„Çì„Å´„Å°„ÅØ" means "hello" in English.\n\nFirst, Thanks to all the Dublin engineers / for inviting me.\nI have been living in Dublin / for one month now / and / I feel very comfortable.\n\nIn fact, I am giving this speech in English / for the first time in my life.\nSo I am very very getting nervous, but / I\'ll do my best.\n\nToday, I would like to talk about ECMAScript Modules / of Node.js.\n\nBTW, Node.js v12 was released / on 23rd April!!!\nIn addition, Node.js v6 will be End-of-life / on 30th April.\nThis is very good news.\n--\x3e\n<h1 id="introduce-br-ecmascript-modules-br-of-node-js">Introduce <br /> ECMAScript modules <br /> of Node.js</h1>\n<p><br></p>\n<p><a href="https://github.com/hiroppy/slides">https://github.com/hiroppy/slides</a></p>\n'},170:function(e,n,t){var o={"./0-title.md":169,"./01-self-introduction.md":168,"./02-mercari.md":166,"./03-contents.md":164,"./04-esm.md":163,"./05-esm-node.md":161,"./06-summary.md":158,"./07-end.md":157};function s(e){var n=i(e);return t(n)}function i(e){var n=o[e];if(!(n+1)){var t=new Error('Cannot find module "'+e+'".');throw t.code="MODULE_NOT_FOUND",t}return n}s.keys=function(){return Object.keys(o)},s.resolve=i,e.exports=s,s.id=170},392:function(e,n,t){t(391),t(153),e.exports=t(156)}},[[392,3,4]]]);