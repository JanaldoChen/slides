(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{146:function(e,n,o){o(147),o(427),o(412),e.exports=o(422)},368:function(e,n,o){var t={"./0-title.md":369,"./01-self-introduction.md":370,"./02-content.md":372,"./03-node/0-title.md":373,"./03-node/01-node.md":374,"./03-node/02-foundation.md":375,"./03-node/03-foundation.md":376,"./03-node/04-lts.md":377,"./03-node/05-stability.md":378,"./04-notable-changes/0-title.md":379,"./04-notable-changes/02-notable-changes.md":380,"./04-notable-changes/03-module/0-title.md":381,"./04-notable-changes/03-module/01-esm.md":382,"./04-notable-changes/03-module/02-esm.md":383,"./04-notable-changes/03-module/03- rules-in-node.md":384,"./04-notable-changes/03-module/04-root-is-cjs.md":385,"./04-notable-changes/03-module/05-root-is-esm.md":386,"./04-notable-changes/04-perf/0-title.md":387,"./04-notable-changes/04-perf/01-performance-timing-api.md":388,"./04-notable-changes/04-perf/02-entry-type.md":389,"./04-notable-changes/04-perf/03-timeline.md":390,"./04-notable-changes/04-perf/04-measure-elapsed-time-of-section.md":391,"./04-notable-changes/04-perf/05-measure-ssr.md":392,"./04-notable-changes/05-fs/0-title.md":393,"./04-notable-changes/05-fs/01-fs.promises.md":394,"./04-notable-changes/05-fs/02-FileHandle.md":395,"./04-notable-changes/05-fs/03-promises.md":396,"./04-notable-changes/06-http2/0-title.md":397,"./04-notable-changes/06-http2/01-standard.md":398,"./04-notable-changes/06-http2/02-push.md":399,"./04-notable-changes/07-worker/0-title.md":400,"./04-notable-changes/07-worker/01-description.md":401,"./04-notable-changes/07-worker/02-api-restrictions.md":402,"./04-notable-changes/07-worker/03-messaging.md":403,"./04-notable-changes/07-worker/04-run-multiple-workers.md":404,"./04-notable-changes/07-worker/05-heavy-tasks.md":405,"./04-notable-changes/08-reference-material.md":406,"./05-hot-topics/0-title.md":407,"./05-hot-topics/01-issues.md":408,"./05-hot-topics/02-issues.md":409,"./06-nodefest.md":410,"./07-end.md":411};function r(e){var n=s(e);return o(n)}function s(e){var n=t[e];if(!(n+1)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return n}r.keys=function(){return Object.keys(t)},r.resolve=s,e.exports=r,r.id=368},369:function(e,n){e.exports='\x3c!-- background: title --\x3e\n<h1 id="future-of-node-js">Future of Node.js</h1>\n<p><br></p>\n<p>repo: <a href="https://github.com/hiroppy/slides">https://github.com/hiroppy/slides</a></p>\n'},370:function(e,n,o){e.exports='\x3c!-- background: profile --\x3e\n<h2 id="-me-">😋 ME 😙</h2>\n<div class="profile">\n  <div class="profile-left">\n    <img src="'+o(371)+'" alt="profile" class="profile-avatar">\n    <h4 class="profile-name">Yuta Hiroto</h4>\n    <div class="sns-list">\n      <a href="https://hiroppy.me" target="_blank">\n        <i class="fas fa-home"></i>\n      </a>\n      <a href="https://twitter.com/about_hiroppy" target="_blank">\n        <i class="fab fa-twitter"></i>\n      </a>\n      <a href="https://github.com/hiroppy" target="_blank">\n        <i class="fab fa-github"></i>\n      </a>\n      <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n        <i class="fab fa-facebook"></i>\n      </a>\n    </div>\n  </div>\n  <div class="profile-right">\n    <h5>\n      <i class="fab fa-js"></i>\n      A Web engineer and Architect\n    </h5>\n    <h4>Working at</h4>\n    <p>Dwango, Inc.</p>\n    <p>Mercari, Inc.</p>\n    <h4>Contributor to</h4>\n    <p>Node.js</p>\n    <p>Babel</p>\n    <p>Stylelint</p>\n    <p>Node.js Japan User Group</p>\n  </div>\n</div>\n\n\x3c!-- note\nMercari: 2018/09 -\nBizReach: 2018/06 -\nDwango: 2015/04 - 2017/05\nMercari: 2017/06 - 2017/12/15\nDwango: 2017/12/16 -\n--\x3e\n'},371:function(e,n,o){e.exports=o.p+"376f5905f3a7df570bb7afff4c696a62.jpg"},372:function(e,n){e.exports='<h2 id="contents">Contents</h2>\n\x3c!-- contents --\x3e\n'},373:function(e,n){e.exports='\x3c!-- sectionTitle: Node.js --\x3e\n<h2 id="node-js-">Node.js ✨🐢🚀✨</h2>\n'},374:function(e,n){e.exports='<h2 id="node-js">Node.js</h2>\n<p>⭐️: 51500 👀: 2800 🍴: 10800</p>\n<hr>\n<p>2017 年、GitHub 内の全リポジトリで 5 番目に review は活発であり、<br>discussing は 8 番目に活発でした 🙌 <a href="https://octoverse.github.com/">octoverse</a><br><a href="http://blog.hiroppy.me/entry/2018/03/30/100008">2017 年度のダウンロード数</a>は、286,225,092 となりました 🎉</p>\n<p><br /></p>\n<p>116 人の Core Collaborators と<br>2000 人 の Contributors によって 開発されてきました。</p>\n<div class="collaborators-in-japan">\n  <a href="https://github.com/shigeki">\n    <img src="https://avatars1.githubusercontent.com/u/782880?s=460&v=4" />\n  </a>\n  <a href="https://github.com/yosuke-furukawa">\n    <img src="https://avatars1.githubusercontent.com/u/555645?s=460&v=4" />\n  </a>\n  <a href="https://github.com/ronkorving">\n    <img src="https://avatars2.githubusercontent.com/u/631240?s=460&v=4" />\n  </a>\n  <a href="https://github.com/watilde">\n    <img src="https://avatars3.githubusercontent.com/u/1716463?s=460&v=4" />\n  </a>\n  <a href="https://github.com/Leko">\n    <img src="https://avatars3.githubusercontent.com/u/1424963?s=460&v=4" />\n  </a>\n  <a href="https://github.com/hiroppy">\n    <img src="https://avatars1.githubusercontent.com/u/3367801?s=460&v=4" />\n  </a>\n</div>\n\n<p><a class="ref-link" href="https://github.com/nodejs/node">https://github.com/nodejs/node</a></p>\n'},375:function(e,n){e.exports='<h2 id="node-js-foundation">Node.js Foundation</h2>\n<p>Node.js は Node.js Foundation により支えられています。</p>\n<p><br /></p>\n<p><a href="https://www.linuxfoundation.org/">Linux Foundation</a> に所属している財団で、<br>後援している<a href="https://foundation.nodejs.org/about/members">企業</a>によって成り立ちます。</p>\n<p><br /></p>\n<p>主に旅費や CI などのサポートを行っています。</p>\n<p>また、<a href="https://github.com/nodejs/node/blob/master/GOVERNANCE.md">Open Governance Model</a> を採用しています。</p>\n<p><a class="ref-link" href="https://foundation.nodejs.org/">https://foundation.nodejs.org</a></p>\n'},376:function(e,n){e.exports='<h2 id="committee-and-working-group">Committee and Working Group</h2>\n<ul>\n<li><a href="https://github.com/nodejs/TSC">Technical Steering Committee (a.k.a. TSC)</a><ul>\n<li>Node.js のすべてを統括する委員会</li>\n<li>Working Group: Website, Stream, Promise, Diagnostics, Build, etc...</li>\n</ul>\n</li>\n<li><a href="https://github.com/nodejs/community-committee">Community Committee (a.k.a. CommComm)</a><ul>\n<li>コミュニティ周りを統括する委員会</li>\n<li>Working Group: Evangelism, Internationalization</li>\n</ul>\n</li>\n<li><a href="https://github.com/nodejs/board">Board</a><ul>\n<li>Node.js Foundation の企業メンバー 及び 取締役</li>\n<li>Legal Committee</li>\n<li>Finance Committee</li>\n</ul>\n</li>\n</ul>\n'},377:function(e,n){e.exports='<h2 id="long-term-support">Long Term Support</h2>\n<p>Node10 のコードネームは Dubnium で、2018/10 から LTS 対象です。<br>Node11 は 2018/10/23 にリリース予定です。</p>\n<p><img src="https://github.com/nodejs/Release/blob/master/schedule.png?raw=true" class="lts"></p>\n<p><a href="https://github.com/nodejs/Release" class="ref-link">https://github.com/nodejs/Release</a></p>\n'},378:function(e,n){e.exports='<h2 id="stability-index">Stability Index</h2>\n<p>Node.js では、モジュール/機能単位でそれぞれインデックスが貼られます。</p>\n<p><br /></p>\n<ul>\n<li>Stability: 0 (非推奨)<ul>\n<li>メジャーバージョンとの互換性を保証しません。</li>\n</ul>\n</li>\n<li>Stability: 1 (実験中)<ul>\n<li>仕様変更が発生しやすく運用での使用は推奨されません。</li>\n</ul>\n</li>\n<li>Stability: 2 (安定)<ul>\n<li>壊れる可能性は必要でない限りあり得ません。</li>\n<li>ユーザーランドとの互換性を最優先にします。</li>\n</ul>\n</li>\n</ul>\n'},379:function(e,n){e.exports='\x3c!-- sectionTitle: Notable Changes  --\x3e\n<h2 id="notable-changes-">Notable Changes 🎉</h2>\n<p>Current (10.7.0)</p>\n'},380:function(e,n){e.exports='<h2 id="notable-changes-of-stability-1">Notable Changes of &quot;stability: 1&quot;</h2>\n<ul>\n<li>ECMAScript Modules</li>\n<li>Perf_Hooks</li>\n<li>promises of File_System</li>\n<li>Worker_Threads</li>\n<li>HTTP2</li>\n</ul>\n<p><br /></p>\n<p>今回はせっかくなので今後安定していく機能を紹介します 😆<br><em>(まだ仕様やシンタックスが変わる可能性があるので、注意してください)</em></p>\n<p><br /></p>\n<p>✍️ <a href="http://blog.hiroppy.me/entry/node10">Node.js v10 の変更点まとめ</a></p>\n\x3c!-- note\nNode10の変更を話そうと思ったが、すでにブログで一覧を出しているのでいいかなと思った。\n--\x3e\n'},381:function(e,n){e.exports='\x3c!-- sectionTitle:  Notable Changes / module --\x3e\n<h3 id="ecmascript-modules-a-k-a-esm-">ECMAScript Modules (a.k.a. ESM)</h3>\n<p><br />\n<br /></p>\n<ul>\n<li>📝 <a href="https://nodejs.org/api/esm.html">nodejs.org/api/esm</a></li>\n<li>✍️ <a href="http://blog.hiroppy.me/entry/nodejs-esm">Node.js と ECMAScript Modules</a></li>\n</ul>\n'},382:function(e,n){e.exports='<h2 id="ecmascript-modules">ECMAScript Modules</h2>\n<p><a href="https://github.com/whatwg/loader">whatwg/loader</a><br>HTML にも関係があるため TC39 ではなく WHATWG が管轄します。</p>\n<p><br /></p>\n<hr>\n<p>Node.js では、<a href="https://github.com/nodejs/modules">nodejs/modules</a>で議論が行われ<br>二週間に一回ミーティングが開かれます。</p>\n<p><br /></p>\n<pre><code class="lang-sh"># 実行時にはフラグが必要\n$ node --experimental-modules index.mjs\n</code></pre>\n'},383:function(e,n){e.exports='<h2 id="ecmascript-modules">ECMAScript Modules</h2>\n<ul>\n<li>シンタックスとして、<code>import/export</code>を提供します</li>\n<li>インポートされたモジュールはすべて厳格モード(strict)で動きます</li>\n<li>CommonJS Modules(CJS) と違い、実行する前に構文エラーがわかります</li>\n<li>モジュール内の<code>this</code>は<code>undefined</code>となります</li>\n<li>WHATWG/URL に準拠します</li>\n</ul>\n'},384:function(e,n){e.exports='<h2 id="rules-in-node-js">Rules in Node.js</h2>\n<ul>\n<li>ファイルの拡張子は<code>.mjs</code>にしなくてはなりません<ul>\n<li>ブラウザでの識別子は<code>type=&quot;module&quot;</code></li>\n</ul>\n</li>\n<li>CJS から ESM への呼び出しは行えません<ul>\n<li>dynamic import(<code>import()</code>)は CJS からも使用することが可能です</li>\n</ul>\n</li>\n<li>CJS のファイルを ESM でインポートする場合、named import は使えません<ul>\n<li>CJS のオブジェクトは<code>default</code>キーワードで包まれるため</li>\n</ul>\n</li>\n<li>ESM で使えないキーワードがあります<ul>\n<li><code>__dirname</code>, <code>__filename</code>, <code>require</code>, <code>exports</code>, <code>module</code>, etc</li>\n</ul>\n</li>\n</ul>\n'},385:function(e,n){e.exports='<h2 id="when-the-entry-point-is-cjs">When the entry point is CJS</h2>\n<pre><code class="lang-js">// friends.mjs\nexport const cat = &#39;cat&#39;;\nexport default &#39;dog&#39;;\n\n// ---------------------------------------\n// index.js // $ node --experimental-modules index.js\n\n// ESMのコードをCJSで呼び出すことはできません\n// const friends = require(&#39;./friends&#39;); // Must use import to load ES Module\n\n// CJSにESMのSyntaxは存在しません\n// import { cat } from &#39;./friends&#39;; // SyntaxError: Unexpected token {\n\n// CJS内でもdynamic importの使用は可能です\n(async () =&gt; {\n  const friends = await import(&#39;./friends&#39;);\n\n  console.log(friends); // [Module] { cat: &#39;cat&#39;, default: &#39;dog&#39; }\n})();\n</code></pre>\n'},386:function(e,n){e.exports='<h2 id="when-the-entry-point-is-esm">When the entry point is ESM</h2>\n<pre><code class="lang-js">// friends.js\nmodule.exports.dog = &#39;dog&#39;;\n\n// ---------------------------------------\n// index.mjs // node --experimental-modules index.mjs\nimport { readFileSync } from &#39;fs&#39;; // ビルトインモジュールは named import が行えるようになった\n\nimport dog from &#39;./friends&#39;; // { dog: &#39;dog&#39; }\nimport * as dog from &#39;./friends&#39;; // [Module] { default: { dog: &#39;dog&#39; } } // defaultで包まれる\nimport { dog } from &#39;./friends&#39;; // Error: CJSで書かれたモジュールに対してnamed importは行えない\n\nconsole.log(import.meta); // { url: &#39;file:///Users/hiroppy/nodejs/node/out/Release/index.mjs&#39; }\n\n(async () =&gt; {\n  const baseURL = new URL(&#39;file://&#39;); // whatwg/urlに準拠している\n  baseURL.pathname = `${process.cwd()}/friends.mjs`;\n\n  await import(baseURL);\n})();\n</code></pre>\n'},387:function(e,n){e.exports='\x3c!-- sectionTitle:  Notable Changes / perf_hooks --\x3e\n<h3 id="perf_hooks">Perf_Hooks</h3>\n<p><br />\n<br /></p>\n<ul>\n<li>📝 <a href="https://nodejs.org/api/perf_hooks.html">nodejs.org/api/perf_hooks</a></li>\n<li>✍️ <a href="http://blog.hiroppy.me/entry//performance-timing-api-with-node.js">時間計測をして Node.js アプリのパフォーマンス改善の手助けをする</a></li>\n</ul>\n'},388:function(e,n){e.exports='<h2 id="performance-timeline-level-2">Performance Timeline Level 2</h2>\n<p><a href="https://w3c.github.io/performance-timeline/">W3C Performance Timeline</a>に準拠した実装です。<br>現在、ブラウザで実装されている Performance API と同等です。<br>単位は、ミリ秒です。</p>\n<p><br /></p>\n<p>Performance Timing API では大まかに以下の 2 種類の測定が行えます。</p>\n<ul>\n<li>区間にかかる時間測定</li>\n<li>イベントにかかる測定</li>\n</ul>\n'},389:function(e,n){e.exports='<h2 id="entrytype">EntryType</h2>\n<p>EntryType にはユーザが定義するものと<br>システムが自動的に発生させる 2 種類あります。</p>\n<ul>\n<li>ユーザー定義<ul>\n<li><code>mark</code> : 区間の地点をマークした時に差し込まれる</li>\n<li><code>measure</code> : 区間に名前がつけられた時の差し込まれる</li>\n<li><code>function</code> : <code>timerify</code>でラップした関数が呼ばれた時に差し込まれる</li>\n</ul>\n</li>\n<li>システム定義<ul>\n<li><code>node</code> : 起動時等に差し込まれる</li>\n<li><code>gc</code> : GC(major, minor, incremental, weakcb) 時に差し込まれる</li>\n<li><code>http2</code> : <code>Http2Session</code>, <code>Http2Stream</code> 時に差し込まれる</li>\n</ul>\n</li>\n</ul>\n'},390:function(e,n){e.exports='<h2 id="performance-timeline">Performance Timeline</h2>\n<pre><code class="lang-txt"> Performance Timeline    |           Entry            |\n       Observer          |    User     |    System    |\n          |\n          | &lt;------------------------------ &lt;node&gt;\n          | &lt;---------------- &lt;mark&gt;\n          |\n          | &lt;------------------------------ &lt;gc&gt;\n          |\n          | &lt;---------------- &lt;mark&gt;\n          |\n          | &lt;---------------- &lt;measure&gt;\n          |\n          | &lt;---------------- &lt;function&gt;\n          |\n          | &lt;------------------------------ &lt;http2&gt;\n          |\n          |\n</code></pre>\n'},391:function(e,n){e.exports='<h2 id="measure-elapsed-time-of-section">Measure elapsed time of section</h2>\n<pre><code class="lang-js">const { performance, PerformanceObserver } = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  list.getEntries().forEach((entry) =&gt; {\n    if (entry.entryType === &#39;measure&#39;) {\n      console.log(entry);\n      // { name: &#39;A to B&#39;, entryType: &#39;measure&#39;, startTime: 86.126079, duration: 20003.415284}\n      observer.disconnect();\n    }\n  });\n});\n\nobs.observe({ entryTypes: [&#39;mark&#39;, &#39;measure&#39;], buffered: true });\n\n(async () =&gt; {\n  performance.mark(&#39;A&#39;); // 計測開始地点を登録\n  await new Promise((r) =&gt; setTimeout(() =&gt; r(), 2000));\n  performance.mark(&#39;B&#39;); // 計測終了地点を登録\n  performance.measure(&#39;A to B&#39;, &#39;A&#39;, &#39;B&#39;); // A, Bの区間名をつける\n})();\n</code></pre>\n'},392:function(e,n){e.exports='<h2 id="measure-rendertostring">Measure renderToString</h2>\n<pre><code class="lang-js">// renderToStringをwatchするためにtimerifyで関数をラップする\nconst render = performance.timerify(require(&#39;react-dom/server&#39;).renderToString);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  list.getEntries().forEach((entry) =&gt; {\n    // 結果はスタックされるため先にoutput2の結果が出力される output2: 4.037017ms\n    if (entry.name === &#39;renderToString&#39;) console.log(`${entry.duration}ms`);\n  });\n  observer.disconnect();\n});\nobs.observe({ entryTypes: [&#39;function&#39;], buffered: true });\n\nconst Main = ({ n }) =&gt;\n  React.createElement(\n    &#39;ul&#39;,\n    null,\n    [...new Array(n)].map((_, i) =&gt; React.createElement(&#39;li&#39;, { key: i }, &#39;test&#39;))\n  );\n\nrender(Main(1)); // output1\nrender(Main(10000000)); // output2\n</code></pre>\n'},393:function(e,n){e.exports='\x3c!-- sectionTitle: Notable Changes / fs.promises --\x3e\n<h3 id="fs-promises">fs.promises</h3>\n<p><br />\n<br /></p>\n<ul>\n<li>📝 <a href="https://nodejs.org/api/fs.html#fs_fs_promises_api">nodejs.org/api/fs.html#fs_fs_promises_api</a></li>\n</ul>\n'},394:function(e,n){e.exports='<h2 id="fs-promises">fs.promises</h2>\n<p>コールバックではなく Promise オブジェクトを返す非同期な fs のメソッドです。</p>\n<p><br /></p>\n<p>変更点として、<code>fs.fstat</code>, <code>fs.fchown</code>, <code>fs.fchmod</code> 等の数値 FB が<br>必要なメソッドは Promise ベース では実装されません。<br>代わりに<code>FileHandle</code>クラスを使用し、<code>open()</code>後の変数を使い操作します。</p>\n'},395:function(e,n){e.exports='<h2 id="class-filehandle">class: FileHandle</h2>\n<pre><code class="lang-js">const { open } = require(&#39;fs&#39;).promises;\n\n(async () =&gt; {\n  let filehandle;\n  try {\n    // resolve時にFileHandleオブジェクトを生成します\n    filehandle = await open(&#39;node&#39;, &#39;r&#39;);\n    const { fd } = filehandle; // FD は 13\n\n    // 内部的にはメンバーとしてFDをもっているため、chmodはfchmodをラップし実行している\n    await filehandle.chmod(&#39;777&#39;);\n  } finally {\n    if (filehandle !== undefined) await filehandle.close();\n  }\n})();\n</code></pre>\n'},396:function(e,n){e.exports='<h2 id="fs-promises">fs.promises</h2>\n<pre><code class="lang-js">const fs = require(&#39;fs&#39;).promises;\n\n// 今まではPromiseオブジェクトを返すようにラップする必要があった\n// それかcallback自体をpromiseで包んでcallbackか呼ばれたらresolveする\nconst readFileAsync = require(&#39;util&#39;).promisify(require(&#39;fs&#39;).readFile);\n// await readFileAsync(fileName, &#39;utf8&#39;);\n\n(async () =&gt; {\n  const fileName = &#39;memo.txt&#39;;\n\n  try {\n    await fs.writeFile(fileName, &#39;hello:)&#39;);\n    await fs.readFile(fileName, &#39;utf8&#39;); // hello:)\n    await fs.stat(fileName);\n    await fs.truncate(fileName);\n    await fs.unlink(fileName);\n  } catch (e) {\n    console.error(e);\n  }\n})();\n</code></pre>\n'},397:function(e,n){e.exports='\x3c!-- sectionTitle: Notable Changes / http2 --\x3e\n<h3 id="http2">HTTP2</h3>\n<p><br />\n<br /></p>\n<p>📝: <a href="https://nodejs.org/api/http2.html">nodejs.org/api/http2</a></p>\n'},398:function(e,n){e.exports='<h2 id="http-2-is-straightforward-">HTTP/2 is straightforward😊</h2>\n<pre><code class="lang-js">const { createSecureServer } = require(&#39;http2&#39;);\nconst { readFileSync } = require(&#39;fs&#39;);\n\nconst options = {\n  key: readFileSync(&#39;localhost-privkey.pem&#39;),\n  cert: readFileSync(&#39;localhost-cert.pem&#39;)\n};\n\n//証明書がなくても動くが、ブラウザからはアクセスできない\nconst server = createSecureServer(options, (req, res) =&gt; {\n  res.end(&#39;Hello World!&#39;);\n}).listen(8080);\n\n// streamを使う場合 (上記の場合は、res.streamが存在する)\nconst server = createSecureServer(options).listen(8080);\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  stream.end(&#39;Hello World!&#39;);\n});\n</code></pre>\n'},399:function(e,n){e.exports='<h2 id="push">Push</h2>\n<pre><code class="lang-js">// 現在、Chromeのバグで信用されてない証明書だと initiator にPush表示されないのでchrome://net-internals/#http2 で確認する必要がある\n// https://bugs.chromium.org/p/chromium/issues/detail?id=824988\nconst { createSecureServer, constants } = require(&#39;http2&#39;);\nconst { readFileSync } = require(&#39;fs&#39;);\nconst options = {\n  key: readFileSync(&#39;localhost-privkey.pem&#39;),\n  cert: readFileSync(&#39;localhost-cert.pem&#39;)\n};\nconst server = createSecureServer(options).listen(3000);\n\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  if (headers[&#39;:path&#39;] === &#39;/&#39;) {\n    for (const asset of [&#39;static/bundle1.js&#39;, &#39;static/bundle2.js&#39;]) {\n      stream.pushStream({ [constants.HTTP2_HEADER_PATH]: asset }, (err, pushStream) =&gt; {\n        if (err) throw err;\n\n        pushStream.respondWithFile(asset);\n        pushStream.close();\n      });\n    }\n  }\n  stream.respondWithFile(&#39;index.html&#39;);\n});\n</code></pre>\n'},400:function(e,n){e.exports='\x3c!-- sectionTitle: Notable Changes / worker_threads --\x3e\n<h3 id="worker_threads">Worker_Threads</h3>\n<p><br />\n<br /></p>\n<ul>\n<li>📝 <a href="https://nodejs.org/api/worker_threads.html">nodejs.org/api/worker_threads</a></li>\n<li>✍️ <a href="http://blog.hiroppy.me/entry/worker_threads">Node.js に worker が入った</a></li>\n</ul>\n'},401:function(e,n){e.exports='<h2 id="what-is-worker_threads-">What is worker_threads?</h2>\n<p>独立したスレッドで動作する環境を作り、<br>それらの間にメッセージチャンネルを構築します。</p>\n<p><br /></p>\n<p>Node.js において大量に負荷の高い処理することは苦手なので、<br>CPU 負荷の高い作業を別のスレッドに委ね、負荷を分散させることが目的です。</p>\n<p><br /></p>\n<pre><code class="lang-sh">$ node --experimental-worker index.js\n</code></pre>\n'},402:function(e,n){e.exports='<h2 id="api-restrictions">API restrictions</h2>\n<ul>\n<li>禁止<ul>\n<li><code>process.chdir()</code>等の group, userID を設定するプロセスメソッド</li>\n<li><code>process.abort()</code></li>\n<li>domain</li>\n<li>親プロセスからの IPC チャンネルのアクセス</li>\n</ul>\n</li>\n<li>変更<ul>\n<li><code>process.env</code> は読み取り専用</li>\n<li><code>process.title</code>は変更不可</li>\n<li><code>process.exit()</code> は単一スレッドのみが処理対象</li>\n<li><code>process.stdin</code>, <code>process.stdout</code>, <code>process.stderr</code> は <code>null</code></li>\n<li>シグナルは行われない (<code>process.on</code>)</li>\n</ul>\n</li>\n</ul>\n'},403:function(e,n){e.exports='<h2 id="messaging">Messaging</h2>\n<p>child_process の IPC と異なります。<br>ブラウザと同様に<code>postMessage</code>のシンタックスを使うことができます。</p>\n<p><br /></p>\n<pre><code class="lang-js">const { MessageChannel } = require(&#39;worker_threads&#39;);\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.on(&#39;message&#39;, (message) =&gt; console.log(message));\nport2.postMessage(&#39;hi&#39;);\n\nport2.on(&#39;message&#39;, (message) =&gt; console.log(message));\nport1.postMessage(&#39;bye&#39;);\n</code></pre>\n'},404:function(e,n){e.exports='<h2 id="run-multiple-workers">Run multiple workers</h2>\n<pre><code class="lang-js">const { Worker, isMainThread, workerData } = require(&#39;worker_threads&#39;);\n\nlet current = 0;\n\nfunction runTimer(title) {\n  setInterval(() =&gt; {\n    console.log(`| ${title} |: ${++current}`);\n  }, 1000);\n}\n\nif (isMainThread) {\n  for (let i = 0; i &lt; 4; i++) {\n    // この場合(__filename)はworkerも同じこのファイルを参照する\n    // workerDataはグローバルパラメーターなので、workerが作られる時にiをworkerが知っている\n    new Worker(__filename, { workerData: i });\n  }\n\n  runTimer(&#39;MainThread&#39;);\n} else {\n  runTimer(`Worker: ${workerData /* i(0 - 3) */}`);\n}\n</code></pre>\n'},405:function(e,n){e.exports='<h2 id="make-heavy-tasks-on-workers">Make heavy tasks on workers</h2>\n<pre><code class="lang-js">// parent.js\nconst { resolve } = require(&#39;path&#39;);\nconst { Worker, workerData } = require(&#39;worker_threads&#39;);\nconst worker = new Worker(resolve(&#39;child.js&#39;), { workerData: null });\n\nworker.on(&#39;message&#39;, (msg) =&gt; console.log(`${msg} from Worker Thread`));\nworker.on(&#39;error&#39;, (err) =&gt; process.exit(1));\n\n// --------------------------------------------------------------------\n// child.js\nconst { PerformanceObserver, performance } = require(&#39;perf_hooks&#39;);\nconst { parentPort } = require(&#39;worker_threads&#39;);\nconst len = 64 * 1024 * 1024;\nconst b = Buffer.allocUnsafe(len);\nlet s = &#39;&#39;;\n\n// 重い処理\nfor (let i = 0; i &lt; 256; ++i) s += String.fromCharCode(i);\nfor (let i = 0; i &lt; 64 * 1024 * 1024; i += 256) b.write(s, i, 256, &#39;ascii&#39;);\nfor (let i = 0; i &lt; 32; ++i) b.toString(&#39;base64&#39;);\nparentPort.postMessage(&#39;finished&#39;);\n</code></pre>\n<p><a href="http://blog.hiroppy.me/entry/worker_threads#%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E9%96%93%E3%81%A7%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86" class="ref-link">&gt; full codes</a></p>\n'},406:function(e,n){e.exports='\x3c!-- background: ref --\x3e\n<h2 id="reference-material-">Reference Material 💁</h2>\n<p><br /></p>\n<ul>\n<li><a href="http://blog.hiroppy.me/entry/node10">Node.js v10 の変更点まとめ</a></li>\n<li><a href="http://blog.hiroppy.me/entry/nodejs-esm">Node.js と ECMAScript Modules</a></li>\n<li><a href="http://blog.hiroppy.me/entry/performance-timing-api-with-node.js">時間計測をして Node.js アプリのパフォーマンス改善の手助けをする</a></li>\n<li><a href="http://blog.hiroppy.me/entry/worker_threads">Node.js に worker が入った</a></li>\n</ul>\n'},407:function(e,n){e.exports='\x3c!-- sectionTitle: Hot Topics --\x3e\n<h2 id="hot-topics-">Hot Topics 🔥</h2>\n<p><br /></p>\n<p>注目している議論中等のトピックを紹介</p>\n'},408:function(e,n){e.exports='<h2 id="hot-topics">Hot Topics</h2>\n<ul>\n<li>今後入るモジュールは <code>@nodejs/</code> という名前空間に展開されるかも<ul>\n<li>PR: <a href="https://github.com/nodejs/node/pull/21551">WIP: new core modules go under a namespace</a></li>\n<li>✍️: <a href="http://blog.hiroppy.me/entry/2018/05/25/100000">Node.js のビルトインモジュールに名前空間が使われるかもしれない</a></li>\n</ul>\n</li>\n<li><code>window.fetch</code> を Core に実装するかどうか<ul>\n<li>ISSUE: <a href="https://github.com/nodejs/node/issues/19393">Implement window.fetch into core</a></li>\n<li>whatwg/stream と node.js の stream との違い等があるため</li>\n</ul>\n</li>\n<li>WebSocket を Core に実装するかどうか<ul>\n<li>ISSUE: <a href="https://github.com/nodejs/node/issues/19308">Adding Websocket support to core</a></li>\n</ul>\n</li>\n<li>Crypto の Promise 化<ul>\n<li>ISSUE: <a href="https://github.com/nodejs/node/issues/15413">meta: planning for promisified fs and crypto</a></li>\n</ul>\n</li>\n</ul>\n'},409:function(e,n){e.exports='<h2 id="hot-topics">Hot Topics</h2>\n<ul>\n<li>標準で full-icu のサポートをする<ul>\n<li>ISSUE: <a href="https://github.com/nodejs/node/issues/19214">Building with full-icu by default</a></li>\n</ul>\n</li>\n<li>Node.js Package Mode を導入するかどうか (<code>.js</code>で ESM を扱えるようにする)<ul>\n<li>PR: <a href="https://github.com/nodejs/node/pull/18392">esm: Implement esm mode flag</a></li>\n<li>package.json の<code>esm</code>識別子を使い、次の package.json までに</li>\n<li>ネストされたフォルダとサブフォルダをすべて ESM とみなす仕様</li>\n</ul>\n</li>\n<li><code>require</code> の情報を ESM でも取得できるようにする<ul>\n<li>PR: <a href="https://github.com/nodejs/node/pull/21317">Import.meta.require</a></li>\n</ul>\n</li>\n<li><a href="https://github.com/google/brotli">google/brotli</a> をコアへ導入 (namespace 問題でブロック中)<ul>\n<li>PR: <a href="https://github.com/nodejs/node/pull/20458">brotli: add brotli support</a></li>\n<li><code>@nodejs/compression/zlib</code>, <code>@nodejs/compression</code> 🤷‍</li>\n</ul>\n</li>\n</ul>\n'},410:function(e,n){e.exports='\x3c!-- background: node --\x3e\n<h2 id="-node-festival-">🗼 東京 Node Festival 🗼</h2>\n<p><br /></p>\n<p><img src="https://nodefest.jp/2017/img/logo-tnf-invert.svg" class="nodefest" /></p>\n<p><a href="https://nodefest.jp/2018/">https://nodefest.jp/2018/</a></p>\n<p><br /></p>\n<p>今年の Node 学園祭は 2018/11/23 - 24 に開催します！</p>\n'},411:function(e,n){e.exports='\x3c!-- background: end --\x3e\n<h1 id="the-end">The End</h1>\n<h4 id="enjoy-your-node-js-life-">Enjoy Your Node.js life 😎</h4>\n<p><br /></p>\n<div class="sns-list sns-list-end">\n  <a href="https://hiroppy.me" target="_blank">\n    <i class="fas fa-home"></i>\n  </a>\n  <a href="https://twitter.com/about_hiroppy" target="_blank">\n    <i class="fab fa-twitter"></i>\n  </a>\n  <a href="https://github.com/hiroppy" target="_blank">\n    <i class="fab fa-github"></i>\n  </a>\n</div>\n'},412:function(e,n,o){"use strict";o.r(n);o(413),o(416),o(419)},423:function(e,n,o){var t=o(424);"string"==typeof t&&(t=[[e.i,t,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};o(34)(t,r);t.locals&&(e.exports=t.locals)},424:function(e,n,o){}},[[146,5,3]],[4]]);