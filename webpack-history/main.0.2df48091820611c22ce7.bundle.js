(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{147:function(n,e,t){t(148),t(414),n.exports=t(408)},369:function(n,e,t){var o={"./0-title.md":370,"./01-self-introduction.md":371,"./02-community.md":373,"./03-bundler.md":381,"./04-history-2012-2013.md":384,"./05-version1.md":385,"./06-hmr.md":387,"./07-tapable.md":390,"./08-history-2014-2015.md":391,"./09-version2.md":392,"./10-tree-shaking.md":393,"./11-history-2016-2017.md":394,"./12-version3.md":395,"./13-scope-hoisting.md":396,"./14-history-2018.md":400,"./15-version4.md":401,"./16-splitChunks.md":402,"./17-prefetch.md":404,"./18-the-future.md":405,"./19-references.md":406,"./20-end.md":407};function i(n){var e=a(n);return t(e)}function a(n){var e=o[n];if(!(e+1)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return e}i.keys=function(){return Object.keys(o)},i.resolve=a,n.exports=i,i.id=369},370:function(n,e){n.exports='\x3c!-- background: webpack --\x3e\n\x3c!-- note\n今回は、みんなでwebpackの歴史を追っていこうと思いました。\n--\x3e\n<h1 id="webpack-br-">webpack の <br /> イママデ と コレカラ</h1>\n<p><br></p>\n<p><a href="https://github.com/hiroppy/slides">https://github.com/hiroppy/slides</a></p>\n'},371:function(n,e,t){n.exports='\x3c!-- background: profile --\x3e\n<h2 id="-me-">😋 ME 😙</h2>\n<p><br /></p>\n<div class="profile">\n  <div class="profile-left">\n    <img src="'+t(372)+'" alt="profile" class="profile-avatar">\n    <h4 class="profile-name">Yuta Hiroto</h4>\n    <div class="sns-list">\n      <a href="https://hiroppy.me" target="_blank">\n        <i class="fas fa-home"></i>\n      </a>\n      <a href="https://twitter.com/about_hiroppy" target="_blank">\n        <i class="fab fa-twitter"></i>\n      </a>\n      <a href="https://github.com/hiroppy" target="_blank">\n        <i class="fab fa-github"></i>\n      </a>\n      <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n        <i class="fab fa-facebook"></i>\n      </a>\n    </div>\n  </div>\n  <div class="profile-right">\n    <h5>\n      <i class="fab fa-js"></i>\n      A Web engineer and Architect\n    </h5>\n    <h4>Working at</h4>\n    <p>Dwango, Inc. as a web frontend developer</p>\n    <p>Mercari, Inc. as a web technical advisor</p>\n    <h4>A member of</h4>\n    <p>Node.js</p>\n    <p>Babel</p>\n    <p>Stylelint</p>\n    <p>Node.js Japan User Group</p>\n  </div>\n</div>\n\n\x3c!-- note\n今、自分は、webpackのメンバーでしたが、webpackはinactiveです。\n\nMercari: 2018/09 -\nBizReach: 2018/06 -\nDwango: 2015/04 - 2017/05\nMercari: 2017/06 - 2017/12/15\nDwango: 2017/12/16 -\n--\x3e\n'},372:function(n,e,t){n.exports=t.p+"376f5905f3a7df570bb7afff4c696a62.jpg"},373:function(n,e,t){n.exports='\x3c!-- sectionTitle: Community --\x3e\n<h2 id="community">Community</h2>\n<hr>\n<h2 id="trends">Trends</h2>\n<p><img src="'+t(374)+'" style="width: 70%" /></p>\n<p><a class="ref-link" href="https://www.npmtrends.com/webpack-vs-parcel-vs-browserify-vs-rollup-vs-fusebox">webpack-vs-parcel-vs-browserify-vs-rollup-vs-fusebox</a></p>\n<hr>\n\x3c!-- note\n2つのgithub organazationを持っている。\n一つはコアでwebpackやwebpack-dev-server, tapable等がある。\nもう一つは、3rd partyパッケージ。例えば、style-loaderやcss-loaderなど。\n\nまた、開発メンバーと有名なプラグインの作者が集まるプライベートslackがある。\nここでは、babelなどとのshared channelも存在し、webpackとの関わりがあるOSSとのコミュニケーションを測っている。\n\n--\x3e\n<h2 id="members-plugin-authors">Members &amp; Plugin Authors</h2>\n<p><br /></p>\n<div class="list">\n  <div>\n    <img src="'+t(375)+'" class="icon" />\n    <br />\n    <p>GitHub</p>\n    <a href="https://github.com/webpack">webpack</a>, <a href="https://github.com/webpack-contrib">webpack-contrib</a>\n  </div>\n  <div>\n    <img src="'+t(376)+'" class="icon" />\n    <br />\n    <p>Slack</p>\n  </div>\n</div>\n\n<hr>\n\x3c!-- note\nbackerでは、$2~\n\ntrivago, airbnb, facebook opensource, adobe, slackなどで、trivagoが一番多く資金を提供しています。\n\nこの資金は、メンバーが開発するときの資金に使われたりします。\n\n--\x3e\n<h2 id="opencollective">OpenCollective</h2>\n<p><img src="'+t(377)+'" /></p>\n<hr>\n\x3c!-- note\nGitHubのメンバーであった時間に基づく測定された単位\n2017年からは1日1回の影響がある。\n\ngold influenceは、open collectiveのbackerかスポンサーに与えられます。\nこれは、influenceの100に等しい値です。\n\n--\x3e\n<h2 id="vote-and-prioritize">Vote and Prioritize</h2>\n<p><br /></p>\n<p><img src="'+t(378)+'" /></p>\n<p><a class="ref-link" href="https://webpack.js.org/vote/">webpack.js.org/vote/</a></p>\n<hr>\n<p><img src="'+t(379)+'" style="width: 40%"/>\n<img src="'+t(380)+'" style="width: 60%" /></p>\n<hr>\n<h2 id="short-long-term-goals">Short / Long Term Goals</h2>\n<p><br /></p>\n<div class="list">\n  <ul>\n    短期目標\n    <li>古いものを今後も維持できるように</li>\n    <li>スポンサーの獲得</li>\n    <li>資金の戦略的利用</li>\n    <li>GSOCのサポート</li>\n  </ul>\n  <ul>\n    長期目標\n    <li>エコシステムのサポート・保守</li>\n    <li>大きいスポンサーへのサポート</li>\n    <li>WebAssemblyの改善</li>\n    <li>性能・ユーザビリティの向上</li>\n    <li>ドキュメント改善</li>\n    <li>革新を続け、持続可能なOSSの一例となる</li>\n  </ul>\n</div>\n\n<p><a class="ref-link" href="https://github.com/webpack/management">webpack/management</a></p>\n'},374:function(n,e,t){n.exports=t.p+"e1a1ae5fe05ab284e8d6f61e27242bfc.png"},375:function(n,e,t){n.exports=t.p+"fe57bfa1280fff07111b156465509bd4.png"},376:function(n,e,t){n.exports=t.p+"6b1e98ccd3832933fc9df1ec7c70b09f.png"},377:function(n,e,t){n.exports=t.p+"648d21a14fdb1541f7a08f845b97863f.png"},378:function(n,e,t){n.exports=t.p+"cc1f570302f655a4eccb49ec805984ef.png"},379:function(n,e,t){n.exports=t.p+"daa1adff8809ba16e5eb1373cc729288.png"},380:function(n,e,t){n.exports=t.p+"bdf32955cdf3c865b8471860834b3cc6.png"},381:function(n,e,t){n.exports='\x3c!-- sectionTitle: Module Bundler --\x3e\n\x3c!-- note\n06:00 ~\n--\x3e\n<h2 id="module-bundler">Module Bundler</h2>\n<hr>\n<h2 id="module-bundler">Module Bundler</h2>\n<p><br /></p>\n<p><img src="'+t(382)+'" class="module-bundler" /></p>\n<hr>\n<h2 id="modules">Modules</h2>\n<pre><code class="lang-javascript">// ESM (ECMAScript Modules)\nimport foo from &#39;./foo&#39;;\nexport default foo;\nimport(&#39;./foo.wasm&#39;); // native support for WebAssembly\nimport(&#39;./foo.json&#39;); // native support for JSON\n\n// CJS (CommonJS Modules)\nconst foo = require(&#39;./foo&#39;);\nmodule.exports = foo;\n\n// AMD (Asynchronous Module Definition)\ndefine([&#39;./foo&#39;], (foo) =&gt; foo);\n</code></pre>\n<pre><code class="lang-css">@import url(&#39;foo.css&#39;);\n</code></pre>\n<pre><code class="lang-html">&lt;img src=&quot;./foo.png&quot;&gt;\n</code></pre>\n<p><a class="ref-link" href="https://webpack.js.org/concepts/modules/">https://webpack.js.org/concepts/modules</a></p>\n<hr>\n\x3c!-- note\n少し語弊がありそうな図。  \n\nwebpack_require\n* s: `entry`の ID\n* c: 各モジュールのキャッシュ `{ [ファイル名]: [module] }`\n* m: 各モジュールのリスト `{ [ファイル名]: [内部コード] }`\n* p: `__webpack_public_path__`の文字列値\n* i = the identity function used for harmony imports\n* e = the chunk ensure function\n* d: ESM のための getter 関数\n* o: Object.prototype.hasOwnProperty.call\n* r: `__esModule`を exports へ`Object.defineProperty`でセットする関数\n* t: 偽物の名前空間を作成するための関数\n* n: ESM ではないモジュールに対する`default`の互換性保持関数\n* h: webpack の hash 値\n* w = an object containing all installed WebAssembly.Instance export objects keyed by module id\n* oe = the uncaught error handler for the webpack runtime\n* nc: `nonce`\n\n--\x3e\n<h2 id="how-it-works-at-runtime">How it works at runtime</h2>\n<p><br /></p>\n<p><img src="'+t(383)+'" style="width: 70%" /></p>\n<hr>\n\x3c!-- note\nProduction ビルド時では、引数は Object ではなく Array となり、  \nmoduleID がファイル名ではなく、index の値となります。\n--\x3e\n<h2 id="modules-object">Modules Object</h2>\n<pre><code class="lang-javascript">const modules = {\n   // スコープをfunction内に収める\n  &#39;./a.js&#39;: function(module, exports, __webpack_require__) {\n    eval(...);\n  },\n  &#39;./b.js&#39;: function(module, exports) { // 末端はrequireが存在しないため、第三はない\n    eval(...);\n  },\n  &#39;./index.js&#39;: function(module, exports, __webpack_require__) {\n    eval(...);\n  },\n  /* !*** multi ./index.js ***! */ // もしentryが配列の場合はこのようになる\n  /* ! no static exports found */\n  0: function(module, exports, __webpack_require__) {\n    eval(...);\n  }\n};\n</code></pre>\n<hr>\n<h2 id="client-side-cjs-and-esm">Client-Side CJS and ESM</h2>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">// CJS                    // 生成されたコード\nconst b = require(&#39;./b&#39;); // const b = __webpack_require__(/_! ./b _/ \\&quot;./b.js\\&quot;);\\n\\n\nconst c = `${b} world`;   // const c = `${b} world`;\\n\\n\n\nmodule.exports = c;       // module.exports = c;\\n\\n\nmodule.exports.d = 1;     // module.exports.d = 1;\\n\\n\n                          // # sourceURL=webpack:///./a.js?\n</code></pre>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">// ESM                       // 生成されたコード\nimport b1, { b } from &#39;./b&#39;; // __webpack_require__.r(__webpack_exports__);\\n\n                             // /* harmony export (binding) */\n                             // __webpack_require__.d(__webpack_exports__, \\&quot;d\\&quot;, function() { return d; });\\n\n                             // /* harmony import */\n                             // var _b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./b */ \\&quot;./b.js\\&quot;);\\n\\n\\n\n\nconst c = `${b1} world`;     // const c = `${_b__WEBPACK_IMPORTED_MODULE_0__[\\&quot;default\\&quot;]} world`;\\n\\n\n\nexport default c;            // /* harmony default export */ __webpack_exports__[\\&quot;default\\&quot;] = (c);\\n\nexport const d = b;          // const d = _b__WEBPACK_IMPORTED_MODULE_0__[\\&quot;b\\&quot;];\\n\\n\n                             // //# sourceURL=webpack:///./a.js?\n</code></pre>\n<hr>\n<h2 id="processing-dependency-resolution">Processing Dependency Resolution</h2>\n<pre><code class="lang-javascript">(function(modules) {\n  var installedModules = {}; // すでに読み込んだモジュールのキャッシュ\n\n  function __webpack_require__(moduleId) {\n    if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\n    var module = (installedModules[moduleId] = { i: moduleId, l: false, exports: {} });\n\n    // module.exportsをbindし、function(module, exports, __webpack_require__) を実行する\n    // moduleのexportsにそのファイルからexportsされた実行結果が入る\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    module.l = true; // 読み込み済みフラグ\n\n    return module.exports;\n  }\n  return __webpack_require__((__webpack_require__.s = 0)); // entry pointを実行\n})({\n  0: function(module, exports, __webpack_require__) {\n    eval(\n      &#39;module.exports = __webpack_require__(/*! ./index.js */&quot;./index.js&quot;);\\n\\n\\n//# sourceURL=webpack:///multi_./index.js?&#39;\n    );\n  }\n});\n</code></pre>\n'},382:function(n,e,t){n.exports=t.p+"5d7cbeed3ec1613c987615740402cb1c.png"},383:function(n,e,t){n.exports=t.p+"3912c96ac92f5563c47aa8487d02e065.png"},384:function(n,e){n.exports='\x3c!-- sectionTitle: History: 2012 - 2013 --\x3e\n<h2 id="2012-2013">2012 - 2013</h2>\n<hr>\n<div class="history-container">\n  <div class="list-with-title">\n    <div class="list-with-title-title">2012</div>\n    <div class="list-with-title-body">\n      <span>CJS をターゲットに<code>modules-webpack</code> として開発がスタート</span>\n      <span>style-loader, css-loader, file-loaderなどのローダーを実装</span>\n      <span>in-memory cachingの実装</span>\n      <span>マルチスレッド化(まだ、Node.jsでは stability:1)</span>\n    </div>\n  </div>\n  <div class="list-with-title">\n    <div class="list-with-title-title">2013</div>\n    <div class="list-with-title-body">\n      <span><code>tapable</code>と呼ばれるプラグインシステムを追加</span>\n      <span>Hot Module Replacementの追加</span>\n      <span>webpack version1.0.0のbeta版リリース🎉</span>\n    </div>\n  </div>\n</div>\n'},385:function(n,e,t){n.exports='\x3c!-- sectionTitle: Release: Version 1 --\x3e\n\x3c!-- note\nrequire.context: 静的に解析するため\nrequire.ensure: code splittingのため\nrequire.include: 現在のチャンクにモジュールを追加する関数(評価はしない)\n--\x3e\n<h2 id="version-1">Version 1</h2>\n<p><br /></p>\n<div class="list-with-description">\n  <div style="text-align: center">\n    <img src="'+t(386)+'" class="description-logo" />\n    <br />\n    <div style="text-align: left">\n      <p>🚀 2014/02/20</p>\n      <p>rc: ~ 12</p>\n      <p>beta: ~ 9</p>\n      <p>alpha: N/A</p>\n    </div>\n  </div>\n  <ul>\n    <li>プラグイン・ローダー機構の追加</li>\n    <li><code>require.(context|ensure|include)</code>の追加</li>\n    <li>CJS・AMDのモジュールシステムをサポート</li>\n    <li>webpack-dev-server, webpack-dev-middlewareのサポート</li>\n    <li>Web, WebWorkers, Node.jsへのバンドル生成をサポート</li>\n  </ul>\n</div>\n'},386:function(n,e,t){n.exports=t.p+"5bfeeff9221947cede06dc87a0002964.svg"},387:function(n,e,t){n.exports='\x3c!-- sectionTitle: Feature: Hot Module Replacement --\x3e\n<h2 id="hot-module-replacement">Hot Module Replacement</h2>\n<hr>\n<h2 id="hot-module-replacement">Hot Module Replacement</h2>\n<p><br /></p>\n<p>ソースコードが変更されるとブラウザをリロードせずに<br>自動的に変更されたモジュールを新しいモジュールへ置換する機能</p>\n<p><br /></p>\n<ul>\n<li>webpack-dev-server</li>\n<li>webpack-hot-middleware</li>\n<li>webpack-hot-client</li>\n</ul>\n<hr>\n\x3c!-- note\n最初にブラウザの準備の方を話す。\n\nRuntimeを追加するために、pluginへHotModuleReplacementPluginを入れる。\nまた、webpack/hot/dev-server、webpack-dev-server/clientを追加。\n\n次に、ファイル監視の話をする。\n--\x3e\n<p><img src="'+t(388)+'" style="width: 70%" /></p>\n<hr>\n<p><img src="'+t(389)+'" /></p>\n<hr>\n\x3c!-- note\n以上がwebpackのhot module replacementの仕組みです\n--\x3e\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">// &quot;output.hotUpdateChunkFilename&quot;: &quot;[id].[hash].hot-update.js&quot;\n\nwebpackHotUpdate(&quot;bundle&quot;,{\n/***/ &quot;./a.js&quot;:\n/*!**************!*\\\n  !*** ./a.js ***!\n  \\**************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n  eval(...);\n/***/ })\n})\n</code></pre>\n<pre><code class="lang-json">// &quot;output.hotUpdateMainFilename&quot;: &quot;[hash].hot-update.json&quot;\n\n{\n  &quot;h&quot;: &quot;5946277f0fe1b6e0144e&quot;,\n  &quot;c&quot;: { &quot;bundle&quot;: true }\n}\n</code></pre>\n'},388:function(n,e,t){n.exports=t.p+"8c7cc9d96c66a12fa0dd7da927ca9922.png"},389:function(n,e,t){n.exports=t.p+"4d7e72ff7a0036ebfa4908f051782da1.png"},390:function(n,e){n.exports='\x3c!-- sectionTitle: Feature: Tapable --\x3e\n<h2 id="tapable">Tapable</h2>\n<p><br /></p>\n<p><a href="https://github.com/webpack/tapable">webpack/tapable</a></p>\n<hr>\n\x3c!-- note\nwebpackのプラグインを作ったことがある人は馴染みがあるかもしれません。\n--\x3e\n<h2 id="tapable">Tapable</h2>\n<p><br /></p>\n<p>webpack プラグインシステム</p>\n<p><code>Waterfall</code>, <code>Bail</code>, <code>Loop</code> のタイプを持ち、<br>webpack のライフサイクルをフックする</p>\n<p><br /></p>\n<pre><code class="lang-javascript">// https://github.com/webpack/webpack/blob/master/lib/MainTemplate.js\n\nthis.hooks.render.tap(\n  &#39;MainTemplate&#39;,\n  (bootstrapSource, chunk, hash, moduleTemplate, dependencyTemplates) =&gt; {\n    const source = new ConcatSource();\n    source.add(&#39;/******/ (function(modules) { // webpackBootstrap\\n&#39;);\n    ...\n    return source;\n  }\n);\n</code></pre>\n<hr>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">const { SyncHook, AsyncParallelHook } = require(&#39;tapable&#39;);\n\nclass Compiler extends SyncHook {\n  constructor() {\n    super();\n    this.hooks = { // 実行された時に処理を行う種類を設置\n      run: new AsyncParallelHook([&#39;source&#39;, &#39;chunk&#39;, &#39;hash&#39;]), // 引数を指定\n      done: new SyncHook()\n    };\n    this.hooks.run.tap(&#39;run&#39;, (source, chunk, hash) =&gt; { console.log(&#39;[core]: run&#39;)});\n    this.hooks.done.tap(&#39;done&#39;, () =&gt; { console.log(&#39;[core]: done&#39;); });\n  }\n}\n\n// ---- userland ---\nconst compiler = new Compiler(), src = &#39;xxx&#39;, chunk = &#39;abc&#39;, hash = &#39;def&#39;;\n\ncompiler.hooks.run.tap(&#39;fooPlugin&#39;, (source, chunk) =&gt; { console.log(&#39;[userLand]: plugin&#39;)});\ncompiler.hooks.run.tapPromise(&#39;barPlugin&#39;, async (a, b) =&gt; {\n  await new Promise((r) =&gt; setTimeout(() =&gt; r(), 1000));\n});\ncompiler.hooks.done.tap(&#39;completion-message&#39;, () =&gt; { console.log(&#39;[userLand]: done&#39;); });\n\ncompiler.hooks.run.promise(src, chunk, hash).then(() =&gt; { // 引数を設定し、実行\n  console.log(&#39;finish&#39;);\n  compiler.hooks.done.call(); // done -&gt; completion-message\n});\n</code></pre>\n<hr>\n\x3c!-- note\nwebpackのhooksでは、多くのバリエーションがあり、様々な表現をすることが可能です。\n--\x3e\n<h2 id="compiler-hooks">Compiler Hooks</h2>\n<div class="list">\n  <ul>\n    <li>entryOption</li>\n    <li>afterPlugins</li>\n    <li>afterResolvers</li>\n    <li>environment</li>\n    <li>afterEnvironment</li>\n    <li>beforeRun</li>\n    <li>run</li>\n    <li>watchRun</li>\n    <li>normalModuleFactory</li>\n    <li>contextModuleFactory</li>\n    <li>beforeCompile</li>\n  </ul>\n  <ul>\n    <li>compile</li>\n    <li>thisCompilation</li>\n    <li>compilation</li>\n    <li>make</li>\n    <li>afterCompile</li>\n    <li>shouldEmit</li>\n    <li>emit</li>\n    <li>afterEmit</li>\n    <li>done</li>\n    <li>failed</li>\n    <li>invalid</li>\n    <li>watchClose</li>\n  </ul>\n</div>\n\n<p><a href="https://webpack.js.org/api/compiler-hooks/#hooks" class="ref-link">https://webpack.js.org/api/compiler-hooks/#hooks</a></p>\n'},391:function(n,e){n.exports='\x3c!-- sectionTitle: History: 2014 - 2015 --\x3e\n<h2 id="2014-2015">2014 - 2015</h2>\n<hr>\n\x3c!-- note\nInstagramでは、もともと、forkしたreuqireJSを使っていましたが、Code Splittingのためにwebpackを使用しました。\n\n--\x3e\n<div class="history-container">\n  <div class="list-with-title">\n    <div class="list-with-title-title">2014</div>\n    <div class="list-with-title-body">\n      <span>webpack version1.0.0がリリース🎉</span>\n      <span>Dan Abramov氏によって、react-hot-loaderが作られる</span>\n      <span>Instagramがwebpackを使ったことにより、有名となる🚀</span>\n    </div>\n  </div>\n  <div class="list-with-title">\n    <div class="list-with-title-title">2015</div>\n    <div class="list-with-title-body">\n      <span>Harmony Modules(ESM)の実験的サポートが開始</span>\n      <span>JavaScript以外の設定ファイルが追加(e.g. webpack.config.coffee)</span>\n      <span>webpack version2 beta がリリース🎉</span>\n    </div>\n  </div>\n</div>\n'},392:function(n,e,t){n.exports='\x3c!-- sectionTitle: Release: Version 2 --\x3e\n\x3c!-- note\nここに書いてしまったので分かりづらいですが、リリースは2017年です。\n\n大幅にスキーマが変更されました。\n多くの人がこの変更に苦労したと思います。\nまた、特に特にextractTextPlugin等\n--\x3e\n<h2 id="version-2">Version 2</h2>\n<p><br /></p>\n<div class="list-with-description">\n  <div style="text-align: center">\n    <img src="'+t(67)+'" class="description-logo" />\n    <br />\n    <div style="text-align: left">\n      <p>🚀 2017/01/18(v2.1.0)</p>\n      <p>rc: ~ 8</p>\n      <p>beta: ~ 28</p>\n      <p>alpha: N/A</p>\n      <p>v1から2年11ヶ月</p>\n    </div>\n  </div>\n  <ul>\n    <li>設定ファイルスキーマの大幅な変更</li>\n    <li>設定ファイルのバリデーターが導入</li>\n    <li>ESM, JSONのネイティブサポート開始</li>\n    <li>パフォーマンスヒントの追加</li>\n    <li>Tree Shakingの追加</li>\n  </ul>\n</div>\n\n<hr>\n<h2 id="performance-hints">Performance hints</h2>\n<pre><code class="lang-javascript">// mode: productionではデフォルトでwarning\nmodule.exports = {\n  performance: {\n    hints: &#39;error&#39;,\n    maxEntrypointSize: 400000, // 250000bytes\n    maxAssetSize: 100000 // 250000bytes\n  }\n};\n</code></pre>\n<pre><code class="lang-txt">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).\nThis can impact web performance.\nAssets: vendor.1047e160d5fc0fcb59cf.6.bundle.js (956 KiB)\n\nWARNING in entrypoint size limit: The following entrypoint(s) combined assetsize exceeds the recommended limit (244 KiB).\nThis can impact web performance.\nEntrypoints:\n  main (966 KiB)\n      vendor.1047e160d5fc0fcb59cf.6.bundle.js\n      main.22bd33c53e53638cfca2.bundle.js\n</code></pre>\n'},393:function(n,e){n.exports='\x3c!-- sectionTitle: Feature: Tree Shaking & Dead Code Elimination --\x3e\n<h2 id="tree-shaking-dead-code-elimination">Tree Shaking &amp; Dead Code Elimination</h2>\n<p><br /></p>\n<p>Tree Shaking, a.k.a. Unused Exports Elimination</p>\n<hr>\n\x3c!-- note\nつい先日でたv4.26.0でuglify-esからterserへ移行されました\nまだ、terserも不安定なので注意してください。\n\nなので、tree shakingはあくまでコードを分解するのであって、実際にコードを消すのはminifyツールが行います。\n--\x3e\n<h2 id="tree-shaking-dead-code-elimination">Tree Shaking &amp; Dead Code Elimination</h2>\n<p><br /></p>\n<p>Tree Shaking とは、<br>ESM を使うことにより、未使用のモジュールを検知しバンドル時に分解する</p>\n<p><br /></p>\n<p>Dead Code Elimination とは、<br>実行に影響しない未使用のコードを発見しそれを削除する<br>webpack の場合は、uglifyJS(or terser) が使われる</p>\n<hr>\n\x3c!-- note\ntree shakingの歴史は意外と古く、1995年にはlispのgoogle groupsで議論がされています\n多くの人がtree shakingという単語を知ったのは、おそらく2015年のrich harrisがrollupで実装したときだと思います。\n--\x3e\n<h2 id="history-of-tree-shaking">History of Tree Shaking</h2>\n<p><br /></p>\n<ul>\n<li>1990s: LISP で議論される(<a href="https://groups.google.com/forum/#!msg/comp.lang.lisp/6zpZsWFFW18/-z_8hHRAIf4J">why is tree-shaking hard?</a>)</li>\n<li>2013: Google Closure Tools, dart2js で実装される</li>\n<li>2015: Rollup で実装される</li>\n</ul>\n<hr>\n\x3c!-- note\n--display-used-exportsをつけると使われる値を確認できます。\n--\x3e\n<pre><code class="lang-javascript">// mode: productionではデフォルトで有効\n\nmodule.exports = {\n  optimization: {\n    usedExports: true // このオプションが必要\n  }\n};\n</code></pre>\n<pre><code class="lang-sh">$ webpack --display-used-exports\n\n    Asset      Size  Chunks             Chunk Names\nbundle.js  5.06 KiB    main  [emitted]  main\nEntrypoint main = bundle.js\n[./a.js] 105 bytes {main} [built]\n    [only some exports used: default] # &lt;------\n[./b.js] 64 bytes {main} [built]\n    [only some exports used: b1]      # &lt;------\n[./index.js] 37 bytes {main} [built]\n</code></pre>\n<hr>\n<pre><code class="lang-javascript">// index.js (entry point)\nimport a from &#39;./a&#39;;\n\nconsole.log(a);\n\n// a.js\nimport { b1 } from &#39;./b&#39;;\n\nconst a = `${b1} from b`; // 使われる\n\nexport default a;\n\nexport const test = () =&gt; 2 * 2; // 使われない\n\n// b.js\nexport const b1 = &#39;b1&#39;; // 使われる\nexport const b2 = &#39;b2&#39;; // 使われない\nconst b3 = &#39;b3&#39;; // ローカル変数\n</code></pre>\n<hr>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">(function(module, __webpack_exports__, __webpack_require__) { // index.js (entry point)\n  __webpack_require__.r(__webpack_exports__);\n  /* harmony import */ var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ &#39;./a.js&#39;);\n\n  console.log(_a__WEBPACK_IMPORTED_MODULE_0__[/* default */ &#39;a&#39;]);\n});\n\n(function(module, __webpack_exports__, __webpack_require__) { // a.js\n  /* unused harmony export test */\n  /* harmony import */ var _b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./b */ &#39;./b.js&#39;);\n\n  const a = `${_b__WEBPACK_IMPORTED_MODULE_0__[/* b1 */ &#39;a&#39;]} from b`; // b.jsのb1を参照する\n  /* harmony default export */ __webpack_exports__[&#39;a&#39;] = a; // index.jsのexportsへ&#39;a&#39;キーとして結果を渡す\n  const test = () =&gt; 2 * 2;\n});\n\n(function(module, __webpack_exports__, __webpack_require__) { // b.js\n  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &#39;a&#39;, function() {\n    return b1;\n  });\n  /* unused harmony export b2 */\n  const b1 = &#39;b1&#39;; // a.jsによって使われている変数\n  const b2 = &#39;b2&#39;; // b2はexportしているが、未使用な変数\n  const b3 = &#39;b3&#39;; // b3はexportしていない変数\n});\n</code></pre>\n<hr>\n\x3c!-- note\ntree shakingとdead code eliminationの仕組みはこのような感じです\n--\x3e\n<h2 id="dead-code-elimination">Dead Code Elimination</h2>\n<pre><code class="lang-javascript">function(e,t,n){ // index.js (entry point)\n  &quot;use strict&quot;;\n  n.r(t);\n  var r=n(/*! ./a */&quot;./a.js&quot;);\n  console.log(r.a)\n}\n\nfunction(e,t,n){ // a.js\n  &quot;use strict&quot;; // testという関数がなくなった\n  const r=`${n(/*! ./b */&quot;./b.js&quot;).a} from b`;\n  t.a=r\n}\n\nfunction(e,t,n){ // b.js\n  &quot;use strict&quot;;\n  n.d(t,&quot;a&quot;,function(){return r});\n  const r=&quot;b1&quot; // b2, b3がなくなった\n}\n</code></pre>\n'},394:function(n,e){n.exports='\x3c!-- sectionTitle: History: 2016 - 2017 --\x3e\n<h2 id="2016-2017">2016 - 2017</h2>\n<hr>\n<div class="history-container">\n  <div class="list-with-title">\n    <div class="list-with-title-title">2016</div>\n    <div class="list-with-title-body">\n      <span>webpack organizationの作成</span>\n      <span>JS Foundationへの参加</span>\n      <span>webpack-cliの開発が開始</span>\n    </div>\n  </div>\n  <div class="list-with-title">\n    <div class="list-with-title-title">2017</div>\n    <div class="list-with-title-body">\n      <span>2年11ヶ月越しにwebpack version2のリリース🎉</span>\n      <span>webpack-contrib organizationを作り、loaderやpluginを移動</span>\n      <span>公式サイトやmedia(e.g. logo)を一新</span>\n      <span>Sokra氏がfull timeの開発へシフト</span>\n      <span>mozillaと組んでwebassemblyへの対応を開始</span>\n      <span>5ヶ月越しにwebpack version3のリリース🎉</span>\n    </div>\n  </div>\n</div>\n'},395:function(n,e,t){n.exports='\x3c!-- sectionTitle: Release: Version 3 --\x3e\n\x3c!-- note\n内部の大幅な変更がメインだったので、移行は簡単だが、ローダーが動かなくなるという問題が多かった。\n\nwebpackMode\n\n- lazy(default)\n- lazy-once\n- eager\n- weak\n\n--\x3e\n<h2 id="version-3">Version 3</h2>\n<p><br /></p>\n<div class="list-with-description">\n  <div style="text-align: center">\n    <img src="'+t(67)+'" class="description-logo" />\n    <br />\n    <div style="text-align: left">\n      <p>🚀 2017/06/20</p>\n      <p>rc: ~ 2</p>\n      <p>beta: N/A</p>\n      <p>alpha: N/A</p>\n      <p>v2から5ヶ月</p>\n    </div>\n  </div>\n  <ul>\n    <li>内部の大幅な変更がメイン</li>\n    <li>Scope Hoistingの追加</li>\n    <li><code>node: false</code>の追加</li>\n    <li>webpackModeの追加</li>\n  </ul>\n</div>\n'},396:function(n,e,t){n.exports='\x3c!-- sectionTitle: Feature: Scope Hoisting --\x3e\n<h2 id="scope-hoisting">Scope Hoisting</h2>\n<p><br /></p>\n<p>a.k.a. Module Concatenation</p>\n<hr>\n<h2 id="scope-hoisting">Scope Hoisting</h2>\n<p><br /></p>\n<p>ESM を使うことによりインポートチェーンをフラット化し、<br>1 つのインライン関数に変換できる場所を検出する。</p>\n<p><br /></p>\n<p>余分な関数呼び出しを減らし、実行時間・コード量を減らすことを期待する。</p>\n<hr>\n\x3c!-- note\ncjsと書かれたもの以外はすべてESMです。\n--\x3e\n<div class="list-with-description">\n  <div>\n    <img src="'+t(397)+'" style="width: auto" />\n  </div>\n  <div>\n    <h2>Complex Tree Pattern</h2>\n    <br />\n    <ul>\n      <li><code>lazy</code>, <code>c</code>, <code>d</code>, <code>cjs</code> は<code>example</code>と別チャンクにする<br />必要がある</li>\n      <li><code>shared</code>は2つの異なるスコープから参照される</li>\n      <li><code>cjs</code>はCommonJS moduleである</li>\n    </ul>\n  </div>\n</div>\n\n<p><a class="ref-link" href="https://github.com/webpack/webpack/tree/master/examples/scope-hoisting">examples/scope-hoisting</a></p>\n<hr>\n\x3c!-- note\n左の図のようにチャンクを分ける必要があります。  \nしかし、その中でもさらに同じレイヤーのものがあるため同一にすることが可能です。\n--\x3e\n<div class="list">\n  <img src="'+t(398)+'" />\n  <img src="'+t(399)+'" />\n</div>\n\n<hr>\n<pre><code class="lang-javascript">// index.js\nimport a from &#39;./a&#39;;\n\n(async () =&gt; {\n  const { default: res } = await import(/* webpackChunkName: &#39;lazy&#39; */ &#39;./lazy&#39;);\n})();\n\n// a.js\nimport shared from &#39;./shared&#39;;      //      +----------+         +----------+\n                                    //      |  index   +---------&gt;   lazy   |\nconst a = `${shared}: a`;           //      +----+-----+         +-----+----+\nexport default a;                   //           |                     |\n                                    //           |                     |\n// lazy.js                          //      +----v-----+               |\nimport shared from &#39;./shared&#39;;      //      |    a     |               |\n                                    //      +----+-----+               |\nconst res = `${shared}: lazy`;      //           |                     |\nexport default res;                 //           |                     |\n                                    //      +----v-----+               |\n// shared.js                        //      |  shared  &lt;---------------+\nimport shared2 from &#39;./shared2&#39;;    //      +----+-----+\n                                    //           |\nexport default &#39;shared&#39;;            //           |\n                                    //      +----v-----+\n// shared2.js                       //      | shared2  |\nexport default &#39;shared2&#39;;           //      +----------+\n</code></pre>\n<hr>\n<h2 id="invalid-case">Invalid Case</h2>\n<pre><code class="lang-javascript">{ // dist/main.js\n/***/ &quot;./a.js&quot;:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ &quot;./index.js&quot;:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ }),\n/***/ &quot;./shared.js&quot;:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ }),\n/***/ &quot;./shared2.js&quot;:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ })\n/******/ };\n</code></pre>\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">// lazy.js\n(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;lazy&quot;],{\n/***/ &quot;./lazy.js&quot;:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ })\n}]);\n</code></pre>\n<hr>\n\x3c!-- note\n--display-optimization-bailoutをつけると、なぜできないかという理由が出力されます。\n--\x3e\n<h2 id="valid-case">Valid Case</h2>\n<pre><code class="lang-javascript">// mode: productionではデフォルトで有効\nmodule.exports = {\n  mode: &#39;development&#39;,\n  optimization: {\n    usedExports: true,\n    concatenateModules: true,\n    occurrenceOrder: true\n  }\n};\n</code></pre>\n<pre><code class="lang-txt">$ webpack --display-optimization-bailout\n\n[./index.js] ./index.js + 1 modules 237 bytes {main} [built]\n    ModuleConcatenation bailout: Cannot concat with ./shared.js because of ./lazy.js\n    | ./index.js 157 bytes [built]\n    |     ModuleConcatenation bailout: Module is an entry point\n    | ./a.js 75 bytes [built]\n[./lazy.js] 82 bytes {lazy} [built]\n    ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./index.js (referenced with import())\n[./shared.js] ./shared.js + 1 modules 83 bytes {main} [built]\n    | ./shared.js 58 bytes [built]\n    | ./shared2.js 25 bytes [built]\n</code></pre>\n<hr>\n\x3c!-- note\nshared.jsを見るとわかるが、webpackがすでにモジュール解決を行った状態で出力します。  \nこのように実行回数を減らしています。\n\n--\x3e\n<pre><code class="lang-javascript">{\n/***/ &quot;./index.js&quot;:   // index.js + a.js\n/*!******************************!*\\\n  !*** ./index.js + 1 modules ***!\n  \\******************************/\n/*! no exports provided */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Cannot concat with ./shared.js because of ./lazy.js */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n/***/ }),\n\n/***/ &quot;./shared.js&quot;: // shared.js + shared2.js\n/*!*******************************!*\\\n  !*** ./shared.js + 1 modules ***!\n  \\*******************************/\n/*! exports provided: default */\n/*! exports used: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n  // CONCATENATED MODULE: ./shared2.js\n  /* harmony default export */\n  var shared2 = (&#39;shared2&#39;); // すでにここでモジュール解決を行っている\n  // CONCATENATED MODULE: ./shared.js\n  /* harmony default export */ var shared = __webpack_exports__[&quot;a&quot;] = (&#39;shared&#39;);\n  //# sourceURL=webpack:///./shared.js_+_1_modules?&quot;);\n/***/ })\n/******/ };\n</code></pre>\n'},397:function(n,e,t){n.exports=t.p+"044f8f5c3ac67ef90e44f2fef8b48b4b.svg"},398:function(n,e,t){n.exports=t.p+"f46b75f3bf8f9e62d3365ca15eee2fcf.svg"},399:function(n,e,t){n.exports=t.p+"8e15e81ebc453aafc2ff65e7076a7162.svg"},400:function(n,e){n.exports='\x3c!-- sectionTitle: History: 2018 --\x3e\n<h2 id="2018">2018</h2>\n<hr>\n\x3c!-- note\nwebpack-commandはいいのですが、webpack-serve問題はいろいろと騒がせたのではないかなと思います。\n\ngoogle summer of code\n学生がOSSへコミットするイベントです。\n\n- deep scopeの解析\n- wasmとwebpackの依存周り\n- webpack-cliの開発\n--\x3e\n<div class="history-container">\n  <div class="list-with-title">\n    <div class="list-with-title-title">2018</div>\n    <div class="list-with-title-body">\n      <span><a href="https://github.com/webpack-contrib/webpack-serve">webpack-serve</a> 及び <a href="https://github.com/webpack-contrib/webpack-command">webpack-command</a>が非推奨となる</span>\n      <span><a href="https://summerofcode.withgoogle.com/archive/2018/organizations/4872598588489728/">Google 🌞 of Code</a>の参加</span>\n      <span><a href="https://twitter.com/webpack">@webpack</a>と<a href="https://twitter.com/WebpackContrib">@WebpackContrib</a>のTwitterアカウント作成</span>\n      <span>webpack4のリリース🎉</span>\n    </div>\n  </div>\n</div>\n'},401:function(n,e,t){n.exports='\x3c!-- sectionTitle: Release: Version 4 --\x3e\n\x3c!-- note\nwebpack4からコードネームがつくようになりました。\nレガート（伊: legato）は、音楽のアーティキュレーションのひとつで、\n連続する2つの音（通常音の高さは異なる）を途切れさせずに滑らかに続けて演奏すること\n\nまた、webpack本体の話ではないですが、CSSとSourceMapsのオンデマンドロードをサポートするmini-css-extract-pluginがリリースされました。\nextract-text-webpack-plugin でcssを分けるのは非推奨です。\n--\x3e\n<h2 id="version-4-legato-">Version 4 (Legato)</h2>\n<p><br /></p>\n<div class="list-with-description">\n  <div style="text-align: center">\n    <img src="'+t(67)+'" class="description-logo" />\n    <br />\n    <div style="text-align: left">\n      <p>🚀 2018/02/25</p>\n      <p>rc: N/A</p>\n      <p>beta: ~ 3</p>\n      <p>alpha: ~ 5</a>\n      <p>v3から6ヶ月</p>\n    </div>\n  </div>\n  <ul>\n    <li>webpack-cliへ移行</li>\n    <li>#0CJS, modeの追加</li>\n    <li><code>CommonsChunkPlugin</code>が<code>splitChunks</code>, <code>runtimeChunk</code>へ</li>\n    <li>モジュールタイプのサポート</li>\n    <li>WebAssemblyのサポート</li>\n    <li>Tree Shakingの効率を上げる<code>sideEffects</code>の追加</li>\n    <li><code>webpackPrefetch</code>, <code>webpackPreload</code>の追加(4.6.0)</li>\n    <li><code>DefinePlugin.runtimeValue</code>の追加(4.13.0)</li>\n    <li><code>splitChunks.maxSize</code>の追加(4.15.0)</li>\n  </ul>\n</div>\n\n<hr>\n\x3c!-- note\nしかし、例えばgraphqlの場合、mjsを読み込みますがjavascript/autoを指定しないと動かないです\n\n--\x3e\n<h2 id="supported-module-types">Supported Module Types</h2>\n<p><br /></p>\n<p>自動的に<code>mjs</code>, <code>json</code>, <code>wasm</code>に対し選択されます</p>\n<p><br /></p>\n<ul>\n<li>javascript/auto<ul>\n<li>CJS、AMD、ESM のすべてをサポート</li>\n</ul>\n</li>\n<li>javascript/esm<ul>\n<li>ESM のみをサポートし、<code>.mjs</code>のデフォルト</li>\n</ul>\n</li>\n<li>javascript/dynamic<ul>\n<li>CJS と AMD のみをサポート</li>\n</ul>\n</li>\n<li>json<ul>\n<li>json をサポート</li>\n</ul>\n</li>\n<li>webassembly/experimental<ul>\n<li>WebAssembly モジュールのサポート</li>\n</ul>\n</li>\n</ul>\n<hr>\n\x3c!-- note\nentry: ./src/index.js\noutput: /.dist/main.js\n\ndevelopment\n  output: pathinfo\n  devtool: eval\n  cache: true\n  optimization\n    - namedModules\n    - namedChunks\nproduction\n  performance-hints: warning\n  optimization\n    flagIncludedChunks\n    occurrenceOrder\n    sideEffects\n    usedExports\n    concatenateModules\n    noEmitOnErrors\n    minimize\n--\x3e\n<h2 id="-0cjs-mode">#0CJS &amp; Mode</h2>\n<p><br /></p>\n<ul>\n<li>デフォルトの<code>entry</code>と<code>output</code>の追加</li>\n<li><code>development</code>, <code>production</code>, <code>none</code>の Mode の追加</li>\n</ul>\n'},402:function(n,e,t){n.exports='\x3c!-- sectionTitle: Feature: SplitChunksPlugin --\x3e\n<h2 id="splitchunksplugin">SplitChunksPlugin</h2>\n<hr>\n<h2 id="disadvantages-of-commonschunkplugin">Disadvantages of CommonsChunkPlugin</h2>\n<p><br /></p>\n<ul>\n<li>チャンクの分解の表現力が弱く、<br />必要以上のダウンロードが発生する可能性がある</li>\n<li>非同期チャンクでは非効率</li>\n<li>制御するのにメソッドを書く必要がある(e.g. <code>minChunks</code>)</li>\n</ul>\n<hr>\n\x3c!-- note\n最適化の種類は3種類あります。\n\nchunks\n  - async: dynamic importされたモジュールの最適化のみ\n  - initial: 同期モジュールの最適化\n  - all: 非同期・同期モジュールの最適化\n--\x3e\n<h2 id="splitchunksplugin">SplitChunksPlugin</h2>\n<p><br /></p>\n<p>モジュールの重複回数とモジュールのカテゴリー(e.g. <code>node_modules</code>)により、<br>自動的にチャンクとして分割するべきモジュールを識別し、分割する</p>\n<p><br /></p>\n<ul>\n<li>不要なモジュールをダウンロードしないため、非同期チャンクでも効率的</li>\n<li>扱いが簡単で自動的</li>\n<li>チャンクグラフを弄らなくて良い</li>\n</ul>\n<hr>\n\x3c!--\nこのような感じで効率的にチャンクを分解します\n--\x3e\n<p><img src="'+t(403)+'" style="width: 70%" /></p>\n<hr>\n\x3c!-- note\nvendorを作るとよくファイル容量が以上に大きくなることがあると思います。\n今までは、entryにホワイトリストとしてライブラリを書いたりすることにより回避していました。\nmaxSizeを指定することにより、これを回避できる。\n--\x3e\n<h2 id="minsize-maxsize">minSize / maxSize</h2>\n<p><br /></p>\n<div class="list">\n  <pre class="language-javascript" style="min-width: inherit">\n    <code class="language-javascript">\nmodule.exports = {\n  splitChunks: {\n    minSize: 100000,  // bytes\n    maxSize: 1000000, // bytes\n    cacheGroups: {\n      vendor: {\n        test: /node_modules/,\n        name: &#39;vendor&#39;,\n        chunks: &#39;initial&#39;,\n        enforce: true\n      }\n    }\n  }\n};\n    </code>\n  </pre>\n  <div>\n  <pre class="language-txt" style="min-width: inherit">\n    <code class="language-txt">\nvendor.e01916c600d5e12dd9aa.16.bundle.js   1.41 MiB\n    </code>\n  </pre>\n  <pre class="language-txt" style="min-width: inherit">\n    <code class="language-txt">\nvendor~253ae210.e46c3fe01b7780f11d81.bundle.js    316 KiB\nvendor~7274e1de.a2d5e8d87c5e36752b28.bundle.js    183 KiB\nvendor~7d359b94.79f7863fa304fe20067e.bundle.js   53.5 KiB\nvendor~9c5b28f6.71223a4ff0625388be27.bundle.js    610 KiB\nvendor~b5906859.2b626aa82671c8667e3a.bundle.js   95.2 KiB\nvendor~db300d2f.d22d5b79be58987d729e.bundle.js   92.9 KiB\nvendor~ec8c427e.59a4800bc2621be8d855.bundle.js     95 KiB\n    </code>\n  </pre>\n</div>\n</div>\n'},403:function(n,e,t){n.exports=t.p+"070e69c3c1a6bf846addf7f2387fad97.png"},404:function(n,e){n.exports='\x3c!-- sectionTitle: Feature: Prefetch / Preload --\x3e\n<h2 id="prefetch-preload">Prefetch / Preload</h2>\n<hr>\n\x3c!-- note\n2018年のgoogle I/Oで話があった、web performance made easyの中で、\n多くprefetch/preloadが話されました。\nその他には、lighthouse, webpackのチャンク, webp\n\n--\x3e\n<h2 id="web-performance-made-easy">Web performance made easy</h2>\n<p><br /></p>\n<iframe width="560" height="315" src="https://www.youtube.com/embed/Mv-l3-tJgGk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n\n<hr>\n\x3c!-- note\nchromeには、httpキャッシュ、メモリキャッシュ、service workerキャッシュ、プッシュキャッシュが存在する\n--\x3e\n<h2 id="prefetch">Prefetch</h2>\n<p><br /></p>\n<p><code>&lt;link rel=&quot;prefetch&quot;&gt;</code></p>\n<p><br /></p>\n<p>Resource Hints の一つ。<br>アイドル状態の時に、将来使用する可能性が高いリソースを取得する。<br>ブラウザのページのロードが完了すると<br>指定されたドキュメントをプリフェッチして http キャッシュに保存する。</p>\n<p><a class="ref-link" href="https://w3c.github.io/resource-hints/#prefetch">w3c/resource-hints/#prefetch</a></p>\n<hr>\n\x3c!-- note\nResource Hintsではない\n--\x3e\n<h2 id="preload">Preload</h2>\n<p><br /></p>\n<p><code>&lt;link rel=&quot;preload&quot;&gt;</code></p>\n<p><br /></p>\n<p>現在のページで必要なリソースをブラウザへ事前に伝えることにより、<br>ページの最初のレンダリングがブロックされにくくなり、<br>リソースの取得を最適化する。</p>\n<p><a class="ref-link" href="https://w3c.github.io/preload/">w3c/preload/</a></p>\n<hr>\n\x3c!-- note\ninitial chunkでは、preloadを設置できません。\n--\x3e\n\x3c!-- prettier-ignore --\x3e\n<pre><code class="lang-javascript">import(\n  /* webpackChunkName: &quot;prefetch&quot;, webpackPrefetch: true */\n  &#39;./prefetch&#39;\n);\nimport(\n  /* webpackChunkName: &quot;preload&quot;, webpackPreload: true */\n  &#39;./preload&#39;\n);\n\n</code></pre>\n'},405:function(n,e,t){n.exports='\x3c!-- sectionTitle: History: The Future --\x3e\n<h2 id="the-future">The Future</h2>\n<hr>\n\x3c!-- note\nuniversal: web、webworker、node.jsで実行されるランタイムコードを挿入します。\nimport.meta: stage3 Node.jsのESMでは__filename, __dirnameなどは使えないため、それの代用\nwebpackGraph: 依存解決ツリーをキャッシングすることによる開発の高速化\n--\x3e\n<h2 id="version-5">Version 5</h2>\n<p><br /></p>\n<p>👷 確定ではないことに注意してください 👷</p>\n<p><br /></p>\n<div class="list-with-description">\n  <div style="text-align: center">\n    <img src="'+t(67)+'" class="description-logo" />\n    <br />\n    <div style="text-align: left">\n      <p>🚀 未定</p>\n      <p><a href="https://github.com/webpack/webpack/projects/5">Project</a></p>\n    </div>\n  </div>\n  <ul>\n    <li><a href="https://github.com/webpack/webpack/pull/8162">persistent cachingの追加(FileCachePluginの追加)</a></li>\n    <li><a href="https://github.com/webpack/webpack/issues/6525"><code>target: &#39;universal&#39;</code> の追加</a></li>\n    <li><code>import.meta</code></li>\n    <li>[wip]: モジュールタイプに<a href="https://github.com/webpack/webpack/pull/6448"><code>css</code></a>, <a href="https://github.com/webpack/webpack/pull/6447"><code>html</code></a>, <a href="https://github.com/webpack/webpack/pull/6446"><code>url</code></a>のサポート</li>\n    <li>[wip]: <a href="https://github.com/webpack/webpack/pull/6395"><code>webpack-preset-</code>の対応, 及びwebpack-mergeの導入</a></li>\n    <li>[spec]: <a href="https://github.com/webpack/webpack/issues/6386"><code>target.webpackGraph</code>の追加</a>\n  </ul>\n</div>\n\n<p><br /></p>\n<pre><code class="lang-txt">$ npm i -D webpack/webpack#next\n</code></pre>\n<hr>\n<h2 id="persistent-caching">Persistent Caching</h2>\n<pre><code class="lang-javascript">{\n  type: &#39;filesystem&#39;, // タイプ\n\n  cacheDirectory: &#39;/path/to/dir&#39;, // ディレクトリ\n\n  name: &#39;something&#39;, // サブフォルダー名\n\n  version: &#39;1xz2&#39;, // 設定ファイルのバージョン\n\n  // いつキャッシュするか\n  // idle: コンパイラがアイドル状態の時\n  // instant: コンパイル・ブロック\n  // background: コンパイラ中・ノンブロッキング\n  store: &#39;idle&#39;,\n\n  loglevel: &#39;warning&#39;, // ログのレベル\n\n  hashAlgorithm: &#39;md4&#39; // ハッシュアルゴリズム\n}\n</code></pre>\n<hr>\n\x3c!-- note\n時間があれば。。。\n\nwebpack5/6 idea\n\nnamed rulesの複雑化。\nmodule.rulesの上書きが難しいため、そこを解決したい。\n\nHMRの改善\nstatsをpluginへ\n--\x3e\n<p style="font-size: 4rem">🏃</p>\n'},406:function(n,e){n.exports='\x3c!-- sectionTitle: References --\x3e\n<h2 id="references">References</h2>\n<p><br /></p>\n<ul>\n<li><a href="https://github.com/sokra/slides">My Story with webpack</a></li>\n<li><a href="https://github.com/webpack/webpack">webpack/webpack</a></li>\n<li><a href="https://webpack.js.org/">webpack.js.org</a></li>\n<li><a href="https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366">webpack 4: Code Splitting, chunk graph and the splitChunks optimization</a></li>\n<li><a href="https://stackoverflow.com/questions/24581873/what-exactly-is-hot-module-replacement-in-webpack">What exactly is Hot Module Replacement in Webpack?</a></li>\n<li><a href="https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c">&lt;link rel=”prefetch/preload”&gt; in webpack</a></li>\n</ul>\n'},407:function(n,e){n.exports='\x3c!-- background: end --\x3e\n<h1 id="the-end">The End</h1>\n<p><br /></p>\n<div class="sns-list sns-list-end">\n  <a href="https://hiroppy.me" target="_blank">\n    <i class="fas fa-home"></i>\n  </a>\n  <a href="https://twitter.com/about_hiroppy" target="_blank">\n    <i class="fab fa-twitter"></i>\n  </a>\n  <a href="https://github.com/hiroppy" target="_blank">\n    <i class="fab fa-github"></i>\n  </a>\n  <a href="https://www.facebook.com/abouthiroppy" target="_blank">\n    <i class="fab fa-facebook"></i>\n  </a>\n</div>\n'},409:function(n,e,t){var o=t(410);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(51)(o,i);o.locals&&(n.exports=o.locals)},410:function(n,e,t){},67:function(n,e,t){n.exports=t.p+"bb1d0db0edb364c1ea5984d8fdb794bb.svg"}},[[147,5,3]],[4]]);